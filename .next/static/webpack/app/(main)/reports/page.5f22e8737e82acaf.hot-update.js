"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(main)/reports/page",{

/***/ "(app-pages-browser)/./src/lib/firebase/services/reports.service.ts":
/*!******************************************************!*\
  !*** ./src/lib/firebase/services/reports.service.ts ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReportsService: function() { return /* binding */ ReportsService; },\n/* harmony export */   reportsService: function() { return /* binding */ reportsService; }\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.service */ \"(app-pages-browser)/./src/lib/firebase/services/base.service.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/constants */ \"(app-pages-browser)/./src/constants/index.ts\");\n/* harmony import */ var _barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=endOfDay,format,getHours,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/format/index.js\");\n/* harmony import */ var _barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=endOfDay,format,getHours,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/startOfDay/index.js\");\n/* harmony import */ var _barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=endOfDay,format,getHours,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/endOfDay/index.js\");\n/* harmony import */ var _barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=endOfDay,format,getHours,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/getHours/index.js\");\n\n\n\n\n\n// A helper to create an empty daily report structure\nconst createEmptyDailyReport = (reportDateStr, reportTimestamp)=>{\n    return {\n        id: reportDateStr,\n        reportDate: reportDateStr,\n        reportTimestamp: reportTimestamp,\n        generatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now(),\n        generatedBy: \"system\",\n        isFinalized: false,\n        salesMetrics: {\n            totalOrders: 0,\n            completedOrders: 0,\n            cancelledOrders: 0,\n            pendingOrders: 0,\n            totalRevenue: 0,\n            totalQuantitySold: 0,\n            averageOrderValue: 0,\n            paymentMethods: {},\n            hourlyBreakdown: Array.from({\n                length: 24\n            }, (_, i)=>({\n                    hour: i,\n                    orders: 0,\n                    revenue: 0\n                }))\n        },\n        productPerformance: {\n            totalProductsSold: 0,\n            uniqueProductsSold: 0,\n            topProducts: [],\n            categoryBreakdown: {},\n            topVariants: []\n        },\n        staffPerformance: {\n            activeStaff: 0,\n            staffMetrics: [],\n            topSalesPerson: {\n                staffId: \"\",\n                staffName: \"\",\n                revenue: 0\n            }\n        },\n        customerMetrics: {\n            totalCustomers: 0,\n            newCustomers: 0,\n            returningCustomers: 0,\n            vipCustomers: 0,\n            customerSegments: {}\n        },\n        inventoryMetrics: {\n            itemsSold: 0,\n            stockMovements: 0,\n            lowStockAlerts: 0,\n            outOfStockItems: 0,\n            topMovingItems: []\n        },\n        returnMetrics: {\n            totalReturns: 0,\n            returnValue: 0,\n            returnRate: 0,\n            exchangeCount: 0,\n            refundAmount: 0,\n            returnReasons: {}\n        },\n        financialSummary: {\n            grossRevenue: 0,\n            discountAmount: 0,\n            taxAmount: 0,\n            netRevenue: 0,\n            totalCost: 0,\n            grossProfit: 0,\n            grossProfitMargin: 0\n        },\n        comparativeMetrics: {\n            previousDay: {\n                revenueGrowth: 0,\n                orderGrowth: 0,\n                customerGrowth: 0\n            },\n            previousWeek: {\n                revenueGrowth: 0,\n                orderGrowth: 0,\n                averageOrderValueGrowth: 0\n            },\n            monthToDate: {\n                totalRevenue: 0,\n                totalOrders: 0,\n                targetProgress: 0\n            }\n        },\n        operationalMetrics: {\n            averageItemsPerOrder: 0,\n            ordersPerStaff: 0,\n            revenuePerStaff: 0,\n            peakHours: []\n        },\n        qualityMetrics: {\n            customerComplaints: 0,\n            warrantyIssues: 0,\n            productDefects: 0\n        },\n        createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now(),\n        updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now(),\n        createdBy: \"system\",\n        updatedBy: \"system\"\n    };\n};\nclass ReportsService extends _base_service__WEBPACK_IMPORTED_MODULE_2__.BaseService {\n    /**\r\n   * Gets a daily report for a specific date. If the report doesn't exist,\r\n   * it generates a new one, saves it, and returns it.\r\n   * This is the primary method to be called from the frontend.\r\n   * @param reportDate The date for which to get or generate the report.\r\n   * @param userId The ID of the user triggering the action.\r\n   */ async getOrGenerateDailyReport(reportDate) {\n        let userId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"system\";\n        const reportDateStr = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(reportDate, \"yyyy-MM-dd\");\n        const reportRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, this.collectionName, reportDateStr);\n        try {\n            // First, try to fetch the existing report.\n            const reportDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(reportRef);\n            if (reportDoc.exists()) {\n                console.log(\"Fetched daily report for \".concat(reportDateStr, \" from cache.\"));\n                return {\n                    success: true,\n                    data: {\n                        id: reportDoc.id,\n                        ...reportDoc.data()\n                    }\n                };\n            }\n            console.log(\"Report for \".concat(reportDateStr, \" not found. Generating new report...\"));\n            // If it doesn't exist, proceed with generation.\n            const dailyReport = createEmptyDailyReport(reportDateStr, firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(reportDate));\n            dailyReport.generatedBy = userId;\n            dailyReport.createdBy = userId;\n            dailyReport.updatedBy = userId;\n            const start = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(reportDate);\n            const end = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(reportDate);\n            // 1. Fetch all sales orders for the given day\n            const ordersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.SALES_ORDERS);\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(ordersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(start)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(end)));\n            const orderSnapshots = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const orders = orderSnapshots.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            // If there are no orders, we still save an empty report to cache this fact.\n            if (orders.length === 0) {\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(reportRef, dailyReport);\n                return {\n                    success: true,\n                    data: dailyReport\n                };\n            }\n            // 2. Fetch all order items for these orders\n            let allItems = [];\n            for (const order of orders){\n                const itemsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.SALES_ORDERS, order.id, _constants__WEBPACK_IMPORTED_MODULE_3__.SUBCOLLECTIONS.ORDER_ITEMS);\n                const itemsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(itemsRef);\n                itemsSnapshot.forEach((doc)=>{\n                    allItems.push({\n                        id: doc.id,\n                        ...doc.data()\n                    });\n                });\n            }\n            // 3. Process data and populate the report object (Full logic is preserved)\n            const completedOrders = orders.filter((o)=>o.status === \"completed\");\n            // === Sales Metrics ===\n            const sm = dailyReport.salesMetrics;\n            sm.totalOrders = orders.length;\n            sm.completedOrders = completedOrders.length;\n            sm.cancelledOrders = orders.filter((o)=>o.status === \"cancelled\").length;\n            sm.pendingOrders = orders.filter((o)=>o.status.startsWith(\"pending\")).length;\n            sm.totalRevenue = completedOrders.reduce((sum, o)=>sum + o.totalAmount, 0);\n            sm.totalQuantitySold = completedOrders.reduce((sum, o)=>sum + o.totalQuantity, 0);\n            sm.averageOrderValue = sm.completedOrders > 0 ? sm.totalRevenue / sm.completedOrders : 0;\n            orders.forEach((order)=>{\n                // Payment methods\n                const pm = order.paymentMethod;\n                if (!sm.paymentMethods[pm]) {\n                    sm.paymentMethods[pm] = {\n                        orderCount: 0,\n                        totalAmount: 0,\n                        percentage: 0\n                    };\n                }\n                sm.paymentMethods[pm].orderCount++;\n                if (order.status === \"completed\") {\n                    sm.paymentMethods[pm].totalAmount += order.totalAmount;\n                }\n                // Hourly breakdown\n                const hour = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(order.orderDate.toDate());\n                sm.hourlyBreakdown[hour].orders++;\n                if (order.status === \"completed\") {\n                    sm.hourlyBreakdown[hour].revenue += order.totalAmount;\n                }\n            });\n            // Calculate payment method percentages\n            if (sm.totalRevenue > 0) {\n                Object.keys(sm.paymentMethods).forEach((key)=>{\n                    sm.paymentMethods[key].percentage = sm.paymentMethods[key].totalAmount / sm.totalRevenue * 100;\n                });\n            }\n            // === Financial Summary ===\n            const fs = dailyReport.financialSummary;\n            fs.grossRevenue = completedOrders.reduce((sum, o)=>sum + o.subtotalAmount, 0);\n            fs.discountAmount = completedOrders.reduce((sum, o)=>sum + o.discountAmount, 0);\n            fs.taxAmount = completedOrders.reduce((sum, o)=>sum + o.taxAmount, 0);\n            fs.netRevenue = completedOrders.reduce((sum, o)=>sum + o.totalAmount, 0);\n            fs.totalCost = allItems.filter((item)=>completedOrders.some((o)=>o.id === item.salesOrderId)).reduce((sum, item)=>sum + item.unitCost, 0);\n            fs.grossProfit = fs.grossRevenue - fs.totalCost;\n            fs.grossProfitMargin = fs.grossRevenue > 0 ? fs.grossProfit / fs.grossRevenue * 100 : 0;\n            // === Product Performance ===\n            const pp = dailyReport.productPerformance;\n            const soldItems = allItems.filter((item)=>completedOrders.some((o)=>o.id === item.salesOrderId));\n            pp.totalProductsSold = soldItems.length;\n            const productSales = {};\n            const variantSales = {};\n            soldItems.forEach((item)=>{\n                // Product aggregation\n                if (!productSales[item.productId]) {\n                    productSales[item.productId] = {\n                        productId: item.productId,\n                        productName: item.productName,\n                        quantitySold: 0,\n                        revenue: 0,\n                        profit: 0\n                    };\n                }\n                productSales[item.productId].quantitySold += item.quantity;\n                productSales[item.productId].revenue += item.finalPrice;\n                productSales[item.productId].profit += item.finalPrice - item.unitCost;\n                // Variant aggregation\n                if (!variantSales[item.variantId]) {\n                    variantSales[item.variantId] = {\n                        variantId: item.variantId,\n                        productName: item.productName,\n                        colorName: item.colorName,\n                        storageCapacity: item.storageCapacity,\n                        quantitySold: 0,\n                        revenue: 0\n                    };\n                }\n                variantSales[item.variantId].quantitySold += item.quantity;\n                variantSales[item.variantId].revenue += item.finalPrice;\n            });\n            pp.uniqueProductsSold = Object.keys(productSales).length;\n            pp.topProducts = Object.values(productSales).sort((a, b)=>b.revenue - a.revenue).slice(0, 10) // Top 10\n            .map((p)=>({\n                    ...p,\n                    profitMargin: p.revenue > 0 ? p.profit / p.revenue * 100 : 0\n                }));\n            pp.topVariants = Object.values(variantSales).sort((a, b)=>b.revenue - a.revenue).slice(0, 10);\n            // === Staff Performance ===\n            const sp = dailyReport.staffPerformance;\n            const staffMetrics = {};\n            completedOrders.forEach((order)=>{\n                if (!staffMetrics[order.staffId]) {\n                    staffMetrics[order.staffId] = {\n                        staffId: order.staffId,\n                        staffName: order.staffName || \"Unknown\",\n                        ordersProcessed: 0,\n                        revenue: 0,\n                        customers: new Set()\n                    };\n                }\n                const metric = staffMetrics[order.staffId];\n                metric.ordersProcessed++;\n                metric.revenue += order.totalAmount;\n                if (order.customerId) {\n                    metric.customers.add(order.customerId);\n                }\n            });\n            sp.activeStaff = Object.keys(staffMetrics).length;\n            sp.staffMetrics = Object.values(staffMetrics).map((m)=>({\n                    staffId: m.staffId,\n                    staffName: m.staffName,\n                    ordersProcessed: m.ordersProcessed,\n                    revenue: m.revenue,\n                    customerCount: m.customers.size,\n                    averageOrderValue: m.ordersProcessed > 0 ? m.revenue / m.ordersProcessed : 0\n                }));\n            if (sp.staffMetrics.length > 0) {\n                const topSeller = Object.values(staffMetrics).sort((a, b)=>b.revenue - a.revenue)[0];\n                sp.topSalesPerson = {\n                    staffId: topSeller.staffId,\n                    staffName: topSeller.staffName,\n                    revenue: topSeller.revenue\n                };\n            }\n            // === Customer Metrics ===\n            const cm = dailyReport.customerMetrics;\n            const customerIds = new Set();\n            completedOrders.forEach((o)=>{\n                if (o.customerId) customerIds.add(o.customerId);\n            });\n            cm.totalCustomers = customerIds.size;\n            // === Save Report ===\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(reportRef, dailyReport, {\n                merge: true\n            });\n            return {\n                success: true,\n                data: dailyReport\n            };\n        } catch (error) {\n            console.error(\"Error getting or generating daily report for \".concat(reportDateStr, \":\"), error);\n            return this.handleError(error);\n        }\n    }\n    /**\r\n   * Generates and saves a daily sales report for a given date.\r\n   * This operation can be resource-intensive and should be run in a trusted environment (e.g., backend, cloud function).\r\n   * @param reportDate The date for which to generate the report.\r\n   * @param userId The ID of the user triggering the generation.\r\n   */ async generateDailyReport(reportDate) {\n        let userId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"system\";\n        try {\n            const reportDateStr = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(reportDate, \"yyyy-MM-dd\");\n            const reportTimestamp = firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(reportDate);\n            const dailyReport = createEmptyDailyReport(reportDateStr, reportTimestamp);\n            dailyReport.generatedBy = userId;\n            dailyReport.createdBy = userId;\n            dailyReport.updatedBy = userId;\n            const start = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(reportDate);\n            const end = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(reportDate);\n            // 1. Fetch all sales orders for the given day\n            const ordersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.SALES_ORDERS);\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(ordersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(start)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(end)));\n            const orderSnapshots = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const orders = orderSnapshots.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            if (orders.length === 0) {\n                // No sales, save an empty report\n                const emptyReportRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, this.collectionName, reportDateStr);\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(emptyReportRef, dailyReport);\n                return {\n                    success: true,\n                    data: dailyReport\n                };\n            }\n            // 2. Fetch all order items for these orders\n            let allItems = [];\n            for (const order of orders){\n                const itemsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.SALES_ORDERS, order.id, _constants__WEBPACK_IMPORTED_MODULE_3__.SUBCOLLECTIONS.ORDER_ITEMS);\n                const itemsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(itemsRef);\n                itemsSnapshot.forEach((doc)=>{\n                    allItems.push({\n                        id: doc.id,\n                        ...doc.data()\n                    });\n                });\n            }\n            // 3. Process data and populate the report object\n            const completedOrders = orders.filter((o)=>o.status === \"completed\");\n            // === Sales Metrics ===\n            const sm = dailyReport.salesMetrics;\n            sm.totalOrders = orders.length;\n            sm.completedOrders = completedOrders.length;\n            sm.cancelledOrders = orders.filter((o)=>o.status === \"cancelled\").length;\n            sm.pendingOrders = orders.filter((o)=>o.status.startsWith(\"pending\")).length;\n            sm.totalRevenue = completedOrders.reduce((sum, o)=>sum + o.totalAmount, 0);\n            sm.totalQuantitySold = completedOrders.reduce((sum, o)=>sum + o.totalQuantity, 0);\n            sm.averageOrderValue = sm.completedOrders > 0 ? sm.totalRevenue / sm.completedOrders : 0;\n            orders.forEach((order)=>{\n                // Payment methods\n                const pm = order.paymentMethod;\n                if (!sm.paymentMethods[pm]) {\n                    sm.paymentMethods[pm] = {\n                        orderCount: 0,\n                        totalAmount: 0,\n                        percentage: 0\n                    };\n                }\n                sm.paymentMethods[pm].orderCount++;\n                if (order.status === \"completed\") {\n                    sm.paymentMethods[pm].totalAmount += order.totalAmount;\n                }\n                // Hourly breakdown\n                const hour = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(order.orderDate.toDate());\n                sm.hourlyBreakdown[hour].orders++;\n                if (order.status === \"completed\") {\n                    sm.hourlyBreakdown[hour].revenue += order.totalAmount;\n                }\n            });\n            // Calculate payment method percentages\n            if (sm.totalRevenue > 0) {\n                Object.keys(sm.paymentMethods).forEach((key)=>{\n                    sm.paymentMethods[key].percentage = sm.paymentMethods[key].totalAmount / sm.totalRevenue * 100;\n                });\n            }\n            // === Financial Summary ===\n            const fs = dailyReport.financialSummary;\n            fs.grossRevenue = completedOrders.reduce((sum, o)=>sum + o.subtotalAmount, 0);\n            fs.discountAmount = completedOrders.reduce((sum, o)=>sum + o.discountAmount, 0);\n            fs.taxAmount = completedOrders.reduce((sum, o)=>sum + o.taxAmount, 0);\n            fs.netRevenue = completedOrders.reduce((sum, o)=>sum + o.totalAmount, 0);\n            fs.totalCost = allItems.filter((item)=>completedOrders.some((o)=>o.id === item.salesOrderId)).reduce((sum, item)=>sum + item.unitCost, 0);\n            fs.grossProfit = fs.grossRevenue - fs.totalCost;\n            fs.grossProfitMargin = fs.grossRevenue > 0 ? fs.grossProfit / fs.grossRevenue * 100 : 0;\n            // === Product Performance ===\n            const pp = dailyReport.productPerformance;\n            const soldItems = allItems.filter((item)=>completedOrders.some((o)=>o.id === item.salesOrderId));\n            pp.totalProductsSold = soldItems.length;\n            const productSales = {};\n            const variantSales = {};\n            soldItems.forEach((item)=>{\n                // Product aggregation\n                if (!productSales[item.productId]) {\n                    productSales[item.productId] = {\n                        productId: item.productId,\n                        productName: item.productName,\n                        quantitySold: 0,\n                        revenue: 0,\n                        profit: 0\n                    };\n                }\n                productSales[item.productId].quantitySold += item.quantity;\n                productSales[item.productId].revenue += item.finalPrice;\n                productSales[item.productId].profit += item.finalPrice - item.unitCost;\n                // Variant aggregation\n                if (!variantSales[item.variantId]) {\n                    variantSales[item.variantId] = {\n                        variantId: item.variantId,\n                        productName: item.productName,\n                        colorName: item.colorName,\n                        storageCapacity: item.storageCapacity,\n                        quantitySold: 0,\n                        revenue: 0\n                    };\n                }\n                variantSales[item.variantId].quantitySold += item.quantity;\n                variantSales[item.variantId].revenue += item.finalPrice;\n            });\n            pp.uniqueProductsSold = Object.keys(productSales).length;\n            pp.topProducts = Object.values(productSales).sort((a, b)=>b.revenue - a.revenue).slice(0, 10) // Top 10\n            .map((p)=>({\n                    ...p,\n                    profitMargin: p.revenue > 0 ? p.profit / p.revenue * 100 : 0,\n                    profit: p.profit\n                }));\n            pp.topVariants = Object.values(variantSales).sort((a, b)=>b.revenue - a.revenue).slice(0, 10);\n            // === Staff Performance ===\n            const sp = dailyReport.staffPerformance;\n            const staffMetrics = {};\n            completedOrders.forEach((order)=>{\n                if (!staffMetrics[order.staffId]) {\n                    staffMetrics[order.staffId] = {\n                        staffId: order.staffId,\n                        staffName: order.staffName || \"Unknown\",\n                        ordersProcessed: 0,\n                        revenue: 0,\n                        customers: new Set()\n                    };\n                }\n                const metric = staffMetrics[order.staffId];\n                metric.ordersProcessed++;\n                metric.revenue += order.totalAmount;\n                if (order.customerId) {\n                    metric.customers.add(order.customerId);\n                }\n            });\n            sp.activeStaff = Object.keys(staffMetrics).length;\n            sp.staffMetrics = Object.values(staffMetrics).map((m)=>({\n                    staffId: m.staffId,\n                    staffName: m.staffName,\n                    ordersProcessed: m.ordersProcessed,\n                    revenue: m.revenue,\n                    customerCount: m.customers.size,\n                    averageOrderValue: m.ordersProcessed > 0 ? m.revenue / m.ordersProcessed : 0\n                }));\n            if (sp.staffMetrics.length > 0) {\n                const topSeller = Object.values(staffMetrics).sort((a, b)=>b.revenue - a.revenue)[0];\n                sp.topSalesPerson = {\n                    staffId: topSeller.staffId,\n                    staffName: topSeller.staffName,\n                    revenue: topSeller.revenue\n                };\n            }\n            // === Customer Metrics ===\n            // This is a simplified version. For accurate new/returning, we need to check customer's history.\n            const cm = dailyReport.customerMetrics;\n            const customerIds = new Set();\n            completedOrders.forEach((o)=>{\n                if (o.customerId) customerIds.add(o.customerId);\n            });\n            cm.totalCustomers = customerIds.size;\n            // This requires fetching each customer doc, can be slow. A better approach is to use a summary field on the customer doc\n            // or use a separate analytics service/cloud function. For now, this is omitted for performance reasons.\n            // cm.newCustomers = ...\n            // cm.returningCustomers = ...\n            // === Save Report ===\n            const reportRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, this.collectionName, reportDateStr);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(reportRef, dailyReport, {\n                merge: true\n            });\n            return {\n                success: true,\n                data: dailyReport\n            };\n        } catch (error) {\n            console.error(\"Error generating daily report:\", error);\n            return this.handleError(error);\n        }\n    }\n    /**\r\n   * Generates a monthly report by aggregating daily reports for a given month and year.\r\n   * @param year The year of the report.\r\n   * @param month The month of the report (1-12).\r\n   * @param userId The ID of the user triggering the generation.\r\n   */ async getMonthlyReport(year, month) {\n        let userId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"system\";\n        try {\n            const startDate = new Date(year, month - 1, 1);\n            const endDate = new Date(year, month, 0);\n            // 1. Fetch all daily reports within the month\n            const dailyReportsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, this.collectionName);\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(dailyReportsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"reportTimestamp\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(startDate)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"reportTimestamp\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(endDate)));\n            const snapshots = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            if (snapshots.empty) {\n                return {\n                    success: false,\n                    error: \"Kh\\xf4ng c\\xf3 dữ liệu b\\xe1o c\\xe1o cho th\\xe1ng \".concat(month, \"/\").concat(year, \".\"),\n                    errorCode: \"NO_DATA\"\n                };\n            }\n            const dailyReports = snapshots.docs.map((doc)=>doc.data());\n            // 2. Aggregate the data\n            // Note: This is a simplified aggregation. A full implementation would create a FirebaseMonthlyReport object.\n            // For now, we'll return an aggregated summary.\n            const monthlySummary = {\n                reportMonth: \"\".concat(year, \"-\").concat(month.toString().padStart(2, \"0\")),\n                totalDaysReported: dailyReports.length,\n                totalRevenue: 0,\n                totalOrders: 0,\n                totalQuantitySold: 0,\n                grossProfit: 0,\n                topProducts: new Map(),\n                staffPerformance: new Map()\n            };\n            for (const daily of dailyReports){\n                monthlySummary.totalRevenue += daily.salesMetrics.totalRevenue;\n                monthlySummary.totalOrders += daily.salesMetrics.completedOrders;\n                monthlySummary.totalQuantitySold += daily.salesMetrics.totalQuantitySold;\n                monthlySummary.grossProfit += daily.financialSummary.grossProfit;\n                // Aggregate product performance\n                daily.productPerformance.topProducts.forEach((p)=>{\n                    const existing = monthlySummary.topProducts.get(p.productId);\n                    if (existing) {\n                        existing.quantitySold += p.quantitySold;\n                        existing.revenue += p.revenue;\n                    } else {\n                        monthlySummary.topProducts.set(p.productId, {\n                            productName: p.productName,\n                            quantitySold: p.quantitySold,\n                            revenue: p.revenue\n                        });\n                    }\n                });\n                // Aggregate staff performance\n                daily.staffPerformance.staffMetrics.forEach((s)=>{\n                    const existing = monthlySummary.staffPerformance.get(s.staffId);\n                    if (existing) {\n                        existing.revenue += s.revenue;\n                        existing.ordersProcessed += s.ordersProcessed;\n                    } else {\n                        monthlySummary.staffPerformance.set(s.staffId, {\n                            staffName: s.staffName,\n                            revenue: s.revenue,\n                            ordersProcessed: s.ordersProcessed\n                        });\n                    }\n                });\n            }\n            // Convert maps to arrays for the final output\n            const finalReport = {\n                ...monthlySummary,\n                topProducts: Array.from(monthlySummary.topProducts.values()).sort((a, b)=>b.revenue - a.revenue).slice(0, 10),\n                staffPerformance: Array.from(monthlySummary.staffPerformance.values()).sort((a, b)=>b.revenue - a.revenue)\n            };\n            return {\n                success: true,\n                data: finalReport\n            };\n        } catch (error) {\n            console.error(\"Error generating monthly report for \".concat(month, \"/\").concat(year, \":\"), error);\n            return this.handleError(error);\n        }\n    }\n    constructor(){\n        super(_constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.REPORTS);\n    }\n}\nconst reportsService = new ReportsService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvZmlyZWJhc2Uvc2VydmljZXMvcmVwb3J0cy5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFVNEI7QUFDUTtBQUlaO0FBTWtDO0FBUXhDO0FBRWxCLHFEQUFxRDtBQUNyRCxNQUFNZ0IseUJBQXlCLENBQzdCQyxlQUNBQztJQUVBLE9BQU87UUFDTEMsSUFBSUY7UUFDSkcsWUFBWUg7UUFDWkMsaUJBQWlCQTtRQUNqQkcsYUFBYWhCLHlEQUFTQSxDQUFDaUIsR0FBRztRQUMxQkMsYUFBYTtRQUNiQyxhQUFhO1FBQ2JDLGNBQWM7WUFDWkMsYUFBYTtZQUNiQyxpQkFBaUI7WUFDakJDLGlCQUFpQjtZQUNqQkMsZUFBZTtZQUNmQyxjQUFjO1lBQ2RDLG1CQUFtQjtZQUNuQkMsbUJBQW1CO1lBQ25CQyxnQkFBZ0IsQ0FBQztZQUNqQkMsaUJBQWlCQyxNQUFNQyxJQUFJLENBQUM7Z0JBQUVDLFFBQVE7WUFBRyxHQUFHLENBQUNDLEdBQUdDLElBQU87b0JBQ3JEQyxNQUFNRDtvQkFDTkUsUUFBUTtvQkFDUkMsU0FBUztnQkFDWDtRQUNGO1FBQ0FDLG9CQUFvQjtZQUNsQkMsbUJBQW1CO1lBQ25CQyxvQkFBb0I7WUFDcEJDLGFBQWEsRUFBRTtZQUNmQyxtQkFBbUIsQ0FBQztZQUNwQkMsYUFBYSxFQUFFO1FBQ2pCO1FBQ0FDLGtCQUFrQjtZQUNoQkMsYUFBYTtZQUNiQyxjQUFjLEVBQUU7WUFDaEJDLGdCQUFnQjtnQkFBRUMsU0FBUztnQkFBSUMsV0FBVztnQkFBSVosU0FBUztZQUFFO1FBQzNEO1FBQ0FhLGlCQUFpQjtZQUNmQyxnQkFBZ0I7WUFDaEJDLGNBQWM7WUFDZEMsb0JBQW9CO1lBQ3BCQyxjQUFjO1lBQ2RDLGtCQUFrQixDQUFDO1FBQ3JCO1FBQ0FDLGtCQUFrQjtZQUNoQkMsV0FBVztZQUNYQyxnQkFBZ0I7WUFDaEJDLGdCQUFnQjtZQUNoQkMsaUJBQWlCO1lBQ2pCQyxnQkFBZ0IsRUFB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TUEsRUFBRWxJLE9BQU8sR0FBR2lJLEVBQUVqSSxPQUFPLEVBQUVtSSxLQUFLLENBQUMsR0FBRztnQkFDM0c1SCxrQkFBa0JkLE1BQU1DLElBQUksQ0FBQ3lLLGVBQWU1SixnQkFBZ0IsQ0FBQ3dILE1BQU0sSUFBSUMsSUFBSSxDQUFDLENBQUNDLEdBQUVDLElBQU1BLEVBQUVsSSxPQUFPLEdBQUdpSSxFQUFFakksT0FBTztZQUM5RztZQUVBLE9BQU87Z0JBQUV1RSxTQUFTO2dCQUFNQyxNQUFNc0c7WUFBWTtRQUU1QyxFQUFFLE9BQU8xQixPQUFPO1lBQ2QvRSxRQUFRK0UsS0FBSyxDQUFDLHVDQUFnREssT0FBVEMsT0FBTSxLQUFRLE9BQUxELE1BQUssTUFBSUw7WUFDdkUsT0FBTyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0Q7UUFDMUI7SUFDRjtJQXRrQkEyQixhQUFjO1FBQ1osS0FBSyxDQUFDL00sbURBQVdBLENBQUNnTixPQUFPO0lBQzNCO0FBcWtCRjtBQUVPLE1BQU1DLGlCQUFpQixJQUFJbkgsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvZmlyZWJhc2Uvc2VydmljZXMvcmVwb3J0cy5zZXJ2aWNlLnRzP2YwMzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBjb2xsZWN0aW9uLFxyXG4gIGRvYyxcclxuICBnZXREb2NzLFxyXG4gIHF1ZXJ5LFxyXG4gIHdoZXJlLFxyXG4gIFRpbWVzdGFtcCxcclxuICBnZXREb2MsXHJcbiAgc2V0RG9jLFxyXG4gIG9yZGVyQnksXHJcbn0gZnJvbSBcImZpcmViYXNlL2ZpcmVzdG9yZVwiO1xyXG5pbXBvcnQgeyBkYiB9IGZyb20gXCJAL2xpYi9maXJlYmFzZVwiO1xyXG5pbXBvcnQge1xyXG4gIEJhc2VTZXJ2aWNlLFxyXG4gIFNlcnZpY2VSZXNwb25zZSxcclxufSBmcm9tIFwiLi9iYXNlLnNlcnZpY2VcIjtcclxuaW1wb3J0IHtcclxuICBGaXJlYmFzZVNhbGVzT3JkZXIsXHJcbiAgRmlyZWJhc2VTYWxlc09yZGVySXRlbSxcclxufSBmcm9tIFwiQC9saWIvZmlyZWJhc2UvbW9kZWxzL3Bvcy5tb2RlbFwiO1xyXG5pbXBvcnQgeyBGaXJlYmFzZURhaWx5UmVwb3J0IH0gZnJvbSBcIkAvbGliL2ZpcmViYXNlL21vZGVscy9yZXBvcnRzLm1vZGVsXCI7XHJcbmltcG9ydCB7IENPTExFQ1RJT05TLCBTVUJDT0xMRUNUSU9OUyB9IGZyb20gXCJAL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQge1xyXG4gIGZvcm1hdCxcclxuICBzdGFydE9mRGF5LFxyXG4gIGVuZE9mRGF5LFxyXG4gIHN1YkRheXMsXHJcbiAgZ2V0SG91cnMsXHJcbiAgc3RhcnRPZkhvdXIsXHJcbn0gZnJvbSBcImRhdGUtZm5zXCI7XHJcblxyXG4vLyBBIGhlbHBlciB0byBjcmVhdGUgYW4gZW1wdHkgZGFpbHkgcmVwb3J0IHN0cnVjdHVyZVxyXG5jb25zdCBjcmVhdGVFbXB0eURhaWx5UmVwb3J0ID0gKFxyXG4gIHJlcG9ydERhdGVTdHI6IHN0cmluZyxcclxuICByZXBvcnRUaW1lc3RhbXA6IFRpbWVzdGFtcFxyXG4pOiBGaXJlYmFzZURhaWx5UmVwb3J0ID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgaWQ6IHJlcG9ydERhdGVTdHIsXHJcbiAgICByZXBvcnREYXRlOiByZXBvcnREYXRlU3RyLFxyXG4gICAgcmVwb3J0VGltZXN0YW1wOiByZXBvcnRUaW1lc3RhbXAsXHJcbiAgICBnZW5lcmF0ZWRBdDogVGltZXN0YW1wLm5vdygpLFxyXG4gICAgZ2VuZXJhdGVkQnk6IFwic3lzdGVtXCIsIC8vIE9yIHBhc3MgdXNlcklkXHJcbiAgICBpc0ZpbmFsaXplZDogZmFsc2UsXHJcbiAgICBzYWxlc01ldHJpY3M6IHtcclxuICAgICAgdG90YWxPcmRlcnM6IDAsXHJcbiAgICAgIGNvbXBsZXRlZE9yZGVyczogMCxcclxuICAgICAgY2FuY2VsbGVkT3JkZXJzOiAwLFxyXG4gICAgICBwZW5kaW5nT3JkZXJzOiAwLFxyXG4gICAgICB0b3RhbFJldmVudWU6IDAsXHJcbiAgICAgIHRvdGFsUXVhbnRpdHlTb2xkOiAwLFxyXG4gICAgICBhdmVyYWdlT3JkZXJWYWx1ZTogMCxcclxuICAgICAgcGF5bWVudE1ldGhvZHM6IHt9LFxyXG4gICAgICBob3VybHlCcmVha2Rvd246IEFycmF5LmZyb20oeyBsZW5ndGg6IDI0IH0sIChfLCBpKSA9PiAoe1xyXG4gICAgICAgIGhvdXI6IGksXHJcbiAgICAgICAgb3JkZXJzOiAwLFxyXG4gICAgICAgIHJldmVudWU6IDAsXHJcbiAgICAgIH0pKSxcclxuICAgIH0sXHJcbiAgICBwcm9kdWN0UGVyZm9ybWFuY2U6IHtcclxuICAgICAgdG90YWxQcm9kdWN0c1NvbGQ6IDAsXHJcbiAgICAgIHVuaXF1ZVByb2R1Y3RzU29sZDogMCxcclxuICAgICAgdG9wUHJvZHVjdHM6IFtdLFxyXG4gICAgICBjYXRlZ29yeUJyZWFrZG93bjoge30sXHJcbiAgICAgIHRvcFZhcmlhbnRzOiBbXSxcclxuICAgIH0sXHJcbiAgICBzdGFmZlBlcmZvcm1hbmNlOiB7XHJcbiAgICAgIGFjdGl2ZVN0YWZmOiAwLFxyXG4gICAgICBzdGFmZk1ldHJpY3M6IFtdLFxyXG4gICAgICB0b3BTYWxlc1BlcnNvbjogeyBzdGFmZklkOiBcIlwiLCBzdGFmZk5hbWU6IFwiXCIsIHJldmVudWU6IDAgfSxcclxuICAgIH0sXHJcbiAgICBjdXN0b21lck1ldHJpY3M6IHtcclxuICAgICAgdG90YWxDdXN0b21lcnM6IDAsXHJcbiAgICAgIG5ld0N1c3RvbWVyczogMCxcclxuICAgICAgcmV0dXJuaW5nQ3VzdG9tZXJzOiAwLFxyXG4gICAgICB2aXBDdXN0b21lcnM6IDAsXHJcbiAgICAgIGN1c3RvbWVyU2VnbWVudHM6IHt9LFxyXG4gICAgfSxcclxuICAgIGludmVudG9yeU1ldHJpY3M6IHtcclxuICAgICAgaXRlbXNTb2xkOiAwLFxyXG4gICAgICBzdG9ja01vdmVtZW50czogMCxcclxuICAgICAgbG93U3RvY2tBbGVydHM6IDAsXHJcbiAgICAgIG91dE9mU3RvY2tJdGVtczogMCxcclxuICAgICAgdG9wTW92aW5nSXRlbXM6IFtdLFxyXG4gICAgfSxcclxuICAgIHJldHVybk1ldHJpY3M6IHtcclxuICAgICAgdG90YWxSZXR1cm5zOiAwLFxyXG4gICAgICByZXR1cm5WYWx1ZTogMCxcclxuICAgICAgcmV0dXJuUmF0ZTogMCxcclxuICAgICAgZXhjaGFuZ2VDb3VudDogMCxcclxuICAgICAgcmVmdW5kQW1vdW50OiAwLFxyXG4gICAgICByZXR1cm5SZWFzb25zOiB7fSxcclxuICAgIH0sXHJcbiAgICBmaW5hbmNpYWxTdW1tYXJ5OiB7XHJcbiAgICAgIGdyb3NzUmV2ZW51ZTogMCxcclxuICAgICAgZGlzY291bnRBbW91bnQ6IDAsXHJcbiAgICAgIHRheEFtb3VudDogMCxcclxuICAgICAgbmV0UmV2ZW51ZTogMCxcclxuICAgICAgdG90YWxDb3N0OiAwLFxyXG4gICAgICBncm9zc1Byb2ZpdDogMCxcclxuICAgICAgZ3Jvc3NQcm9maXRNYXJnaW46IDAsXHJcbiAgICB9LFxyXG4gICAgY29tcGFyYXRpdmVNZXRyaWNzOiB7XHJcbiAgICAgIHByZXZpb3VzRGF5OiB7IHJldmVudWVHcm93dGg6IDAsIG9yZGVyR3Jvd3RoOiAwLCBjdXN0b21lckdyb3d0aDogMCB9LFxyXG4gICAgICBwcmV2aW91c1dlZWs6IHtcclxuICAgICAgICByZXZlbnVlR3Jvd3RoOiAwLFxyXG4gICAgICAgIG9yZGVyR3Jvd3RoOiAwLFxyXG4gICAgICAgIGF2ZXJhZ2VPcmRlclZhbHVlR3Jvd3RoOiAwLFxyXG4gICAgICB9LFxyXG4gICAgICBtb250aFRvRGF0ZTogeyB0b3RhbFJldmVudWU6IDAsIHRvdGFsT3JkZXJzOiAwLCB0YXJnZXRQcm9ncmVzczogMCB9LFxyXG4gICAgfSxcclxuICAgIG9wZXJhdGlvbmFsTWV0cmljczoge1xyXG4gICAgICBhdmVyYWdlSXRlbXNQZXJPcmRlcjogMCxcclxuICAgICAgb3JkZXJzUGVyU3RhZmY6IDAsXHJcbiAgICAgIHJldmVudWVQZXJTdGFmZjogMCxcclxuICAgICAgcGVha0hvdXJzOiBbXSxcclxuICAgIH0sXHJcbiAgICBxdWFsaXR5TWV0cmljczoge1xyXG4gICAgICBjdXN0b21lckNvbXBsYWludHM6IDAsXHJcbiAgICAgIHdhcnJhbnR5SXNzdWVzOiAwLFxyXG4gICAgICBwcm9kdWN0RGVmZWN0czogMCxcclxuICAgIH0sXHJcbiAgICBjcmVhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKSxcclxuICAgIHVwZGF0ZWRBdDogVGltZXN0YW1wLm5vdygpLFxyXG4gICAgY3JlYXRlZEJ5OiBcInN5c3RlbVwiLFxyXG4gICAgdXBkYXRlZEJ5OiBcInN5c3RlbVwiLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgUmVwb3J0c1NlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihDT0xMRUNUSU9OUy5SRVBPUlRTKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgYSBkYWlseSByZXBvcnQgZm9yIGEgc3BlY2lmaWMgZGF0ZS4gSWYgdGhlIHJlcG9ydCBkb2Vzbid0IGV4aXN0LFxyXG4gICAqIGl0IGdlbmVyYXRlcyBhIG5ldyBvbmUsIHNhdmVzIGl0LCBhbmQgcmV0dXJucyBpdC5cclxuICAgKiBUaGlzIGlzIHRoZSBwcmltYXJ5IG1ldGhvZCB0byBiZSBjYWxsZWQgZnJvbSB0aGUgZnJvbnRlbmQuXHJcbiAgICogQHBhcmFtIHJlcG9ydERhdGUgVGhlIGRhdGUgZm9yIHdoaWNoIHRvIGdldCBvciBnZW5lcmF0ZSB0aGUgcmVwb3J0LlxyXG4gICAqIEBwYXJhbSB1c2VySWQgVGhlIElEIG9mIHRoZSB1c2VyIHRyaWdnZXJpbmcgdGhlIGFjdGlvbi5cclxuICAgKi9cclxuICBhc3luYyBnZXRPckdlbmVyYXRlRGFpbHlSZXBvcnQoXHJcbiAgICByZXBvcnREYXRlOiBEYXRlLFxyXG4gICAgdXNlcklkOiBzdHJpbmcgPSBcInN5c3RlbVwiXHJcbiAgKTogUHJvbWlzZTxTZXJ2aWNlUmVzcG9uc2U8RmlyZWJhc2VEYWlseVJlcG9ydD4+IHtcclxuICAgIGNvbnN0IHJlcG9ydERhdGVTdHIgPSBmb3JtYXQocmVwb3J0RGF0ZSwgXCJ5eXl5LU1NLWRkXCIpO1xyXG4gICAgY29uc3QgcmVwb3J0UmVmID0gZG9jKGRiLCB0aGlzLmNvbGxlY3Rpb25OYW1lLCByZXBvcnREYXRlU3RyKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBGaXJzdCwgdHJ5IHRvIGZldGNoIHRoZSBleGlzdGluZyByZXBvcnQuXHJcbiAgICAgIGNvbnN0IHJlcG9ydERvYyA9IGF3YWl0IGdldERvYyhyZXBvcnRSZWYpO1xyXG4gICAgICBpZiAocmVwb3J0RG9jLmV4aXN0cygpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYEZldGNoZWQgZGFpbHkgcmVwb3J0IGZvciAke3JlcG9ydERhdGVTdHJ9IGZyb20gY2FjaGUuYCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICBkYXRhOiB7IGlkOiByZXBvcnREb2MuaWQsIC4uLnJlcG9ydERvYy5kYXRhKCkgfSBhcyBGaXJlYmFzZURhaWx5UmVwb3J0LFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGBSZXBvcnQgZm9yICR7cmVwb3J0RGF0ZVN0cn0gbm90IGZvdW5kLiBHZW5lcmF0aW5nIG5ldyByZXBvcnQuLi5gKTtcclxuICAgICAgLy8gSWYgaXQgZG9lc24ndCBleGlzdCwgcHJvY2VlZCB3aXRoIGdlbmVyYXRpb24uXHJcbiAgICAgIGNvbnN0IGRhaWx5UmVwb3J0ID0gY3JlYXRlRW1wdHlEYWlseVJlcG9ydChcclxuICAgICAgICByZXBvcnREYXRlU3RyLFxyXG4gICAgICAgIFRpbWVzdGFtcC5mcm9tRGF0ZShyZXBvcnREYXRlKVxyXG4gICAgICApO1xyXG4gICAgICBkYWlseVJlcG9ydC5nZW5lcmF0ZWRCeSA9IHVzZXJJZDtcclxuICAgICAgZGFpbHlSZXBvcnQuY3JlYXRlZEJ5ID0gdXNlcklkO1xyXG4gICAgICBkYWlseVJlcG9ydC51cGRhdGVkQnkgPSB1c2VySWQ7XHJcblxyXG4gICAgICBjb25zdCBzdGFydCA9IHN0YXJ0T2ZEYXkocmVwb3J0RGF0ZSk7XHJcbiAgICAgIGNvbnN0IGVuZCA9IGVuZE9mRGF5KHJlcG9ydERhdGUpO1xyXG5cclxuICAgICAgLy8gMS4gRmV0Y2ggYWxsIHNhbGVzIG9yZGVycyBmb3IgdGhlIGdpdmVuIGRheVxyXG4gICAgICBjb25zdCBvcmRlcnNSZWYgPSBjb2xsZWN0aW9uKGRiLCBDT0xMRUNUSU9OUy5TQUxFU19PUkRFUlMpO1xyXG4gICAgICBjb25zdCBxID0gcXVlcnkoXHJcbiAgICAgICAgb3JkZXJzUmVmLFxyXG4gICAgICAgIHdoZXJlKFwib3JkZXJEYXRlXCIsIFwiPj1cIiwgVGltZXN0YW1wLmZyb21EYXRlKHN0YXJ0KSksXHJcbiAgICAgICAgd2hlcmUoXCJvcmRlckRhdGVcIiwgXCI8PVwiLCBUaW1lc3RhbXAuZnJvbURhdGUoZW5kKSlcclxuICAgICAgKTtcclxuICAgICAgY29uc3Qgb3JkZXJTbmFwc2hvdHMgPSBhd2FpdCBnZXREb2NzKHEpO1xyXG4gICAgICBjb25zdCBvcmRlcnMgPSBvcmRlclNuYXBzaG90cy5kb2NzLm1hcChcclxuICAgICAgICAoZG9jKSA9PiAoeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0gYXMgRmlyZWJhc2VTYWxlc09yZGVyKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIG9yZGVycywgd2Ugc3RpbGwgc2F2ZSBhbiBlbXB0eSByZXBvcnQgdG8gY2FjaGUgdGhpcyBmYWN0LlxyXG4gICAgICBpZiAob3JkZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGF3YWl0IHNldERvYyhyZXBvcnRSZWYsIGRhaWx5UmVwb3J0KTtcclxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBkYWlseVJlcG9ydCB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAyLiBGZXRjaCBhbGwgb3JkZXIgaXRlbXMgZm9yIHRoZXNlIG9yZGVyc1xyXG4gICAgICBsZXQgYWxsSXRlbXM6IEZpcmViYXNlU2FsZXNPcmRlckl0ZW1bXSA9IFtdO1xyXG4gICAgICBmb3IgKGNvbnN0IG9yZGVyIG9mIG9yZGVycykge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zUmVmID0gY29sbGVjdGlvbihcclxuICAgICAgICAgIGRiLFxyXG4gICAgICAgICAgQ09MTEVDVElPTlMuU0FMRVNfT1JERVJTLFxyXG4gICAgICAgICAgb3JkZXIuaWQsXHJcbiAgICAgICAgICBTVUJDT0xMRUNUSU9OUy5PUkRFUl9JVEVNU1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgaXRlbXNTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MoaXRlbXNSZWYpO1xyXG4gICAgICAgIGl0ZW1zU25hcHNob3QuZm9yRWFjaCgoZG9jKSA9PiB7XHJcbiAgICAgICAgICBhbGxJdGVtcy5wdXNoKHsgaWQ6IGRvYy5pZCwgLi4uZG9jLmRhdGEoKSB9IGFzIEZpcmViYXNlU2FsZXNPcmRlckl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAzLiBQcm9jZXNzIGRhdGEgYW5kIHBvcHVsYXRlIHRoZSByZXBvcnQgb2JqZWN0IChGdWxsIGxvZ2ljIGlzIHByZXNlcnZlZClcclxuICAgICAgY29uc3QgY29tcGxldGVkT3JkZXJzID0gb3JkZXJzLmZpbHRlcigobykgPT4gby5zdGF0dXMgPT09IFwiY29tcGxldGVkXCIpO1xyXG5cclxuICAgICAgLy8gPT09IFNhbGVzIE1ldHJpY3MgPT09XHJcbiAgICAgIGNvbnN0IHNtID0gZGFpbHlSZXBvcnQuc2FsZXNNZXRyaWNzO1xyXG4gICAgICBzbS50b3RhbE9yZGVycyA9IG9yZGVycy5sZW5ndGg7XHJcbiAgICAgIHNtLmNvbXBsZXRlZE9yZGVycyA9IGNvbXBsZXRlZE9yZGVycy5sZW5ndGg7XHJcbiAgICAgIHNtLmNhbmNlbGxlZE9yZGVycyA9IG9yZGVycy5maWx0ZXIoXHJcbiAgICAgICAgKG8pID0+IG8uc3RhdHVzID09PSBcImNhbmNlbGxlZFwiXHJcbiAgICAgICkubGVuZ3RoO1xyXG4gICAgICBzbS5wZW5kaW5nT3JkZXJzID0gb3JkZXJzLmZpbHRlcigobykgPT5cclxuICAgICAgICBvLnN0YXR1cy5zdGFydHNXaXRoKFwicGVuZGluZ1wiKVxyXG4gICAgICApLmxlbmd0aDtcclxuICAgICAgc20udG90YWxSZXZlbnVlID0gY29tcGxldGVkT3JkZXJzLnJlZHVjZShcclxuICAgICAgICAoc3VtLCBvKSA9PiBzdW0gKyBvLnRvdGFsQW1vdW50LFxyXG4gICAgICAgIDBcclxuICAgICAgKTtcclxuICAgICAgc20udG90YWxRdWFudGl0eVNvbGQgPSBjb21wbGV0ZWRPcmRlcnMucmVkdWNlKFxyXG4gICAgICAgIChzdW0sIG8pID0+IHN1bSArIG8udG90YWxRdWFudGl0eSxcclxuICAgICAgICAwXHJcbiAgICAgICk7XHJcbiAgICAgIHNtLmF2ZXJhZ2VPcmRlclZhbHVlID1cclxuICAgICAgICBzbS5jb21wbGV0ZWRPcmRlcnMgPiAwID8gc20udG90YWxSZXZlbnVlIC8gc20uY29tcGxldGVkT3JkZXJzIDogMDtcclxuXHJcbiAgICAgIG9yZGVycy5mb3JFYWNoKChvcmRlcikgPT4ge1xyXG4gICAgICAgIC8vIFBheW1lbnQgbWV0aG9kc1xyXG4gICAgICAgIGNvbnN0IHBtID0gb3JkZXIucGF5bWVudE1ldGhvZDtcclxuICAgICAgICBpZiAoIXNtLnBheW1lbnRNZXRob2RzW3BtXSkge1xyXG4gICAgICAgICAgc20ucGF5bWVudE1ldGhvZHNbcG1dID0ge1xyXG4gICAgICAgICAgICBvcmRlckNvdW50OiAwLFxyXG4gICAgICAgICAgICB0b3RhbEFtb3VudDogMCxcclxuICAgICAgICAgICAgcGVyY2VudGFnZTogMCxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNtLnBheW1lbnRNZXRob2RzW3BtXS5vcmRlckNvdW50Kys7XHJcbiAgICAgICAgaWYgKG9yZGVyLnN0YXR1cyA9PT0gXCJjb21wbGV0ZWRcIikge1xyXG4gICAgICAgICAgc20ucGF5bWVudE1ldGhvZHNbcG1dLnRvdGFsQW1vdW50ICs9IG9yZGVyLnRvdGFsQW1vdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSG91cmx5IGJyZWFrZG93blxyXG4gICAgICAgIGNvbnN0IGhvdXIgPSBnZXRIb3VycyhvcmRlci5vcmRlckRhdGUudG9EYXRlKCkpO1xyXG4gICAgICAgIHNtLmhvdXJseUJyZWFrZG93bltob3VyXS5vcmRlcnMrKztcclxuICAgICAgICBpZiAob3JkZXIuc3RhdHVzID09PSBcImNvbXBsZXRlZFwiKSB7XHJcbiAgICAgICAgICBzbS5ob3VybHlCcmVha2Rvd25baG91cl0ucmV2ZW51ZSArPSBvcmRlci50b3RhbEFtb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBDYWxjdWxhdGUgcGF5bWVudCBtZXRob2QgcGVyY2VudGFnZXNcclxuICAgICAgaWYgKHNtLnRvdGFsUmV2ZW51ZSA+IDApIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhzbS5wYXltZW50TWV0aG9kcykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICBzbS5wYXltZW50TWV0aG9kc1trZXldLnBlcmNlbnRhZ2UgPVxyXG4gICAgICAgICAgICAoc20ucGF5bWVudE1ldGhvZHNba2V5XS50b3RhbEFtb3VudCAvIHNtLnRvdGFsUmV2ZW51ZSkgKiAxMDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vID09PSBGaW5hbmNpYWwgU3VtbWFyeSA9PT1cclxuICAgICAgY29uc3QgZnMgPSBkYWlseVJlcG9ydC5maW5hbmNpYWxTdW1tYXJ5O1xyXG4gICAgICBmcy5ncm9zc1JldmVudWUgPSBjb21wbGV0ZWRPcmRlcnMucmVkdWNlKFxyXG4gICAgICAgIChzdW0sIG8pID0+IHN1bSArIG8uc3VidG90YWxBbW91bnQsXHJcbiAgICAgICAgMFxyXG4gICAgICApO1xyXG4gICAgICBmcy5kaXNjb3VudEFtb3VudCA9IGNvbXBsZXRlZE9yZGVycy5yZWR1Y2UoXHJcbiAgICAgICAgKHN1bSwgbykgPT4gc3VtICsgby5kaXNjb3VudEFtb3VudCxcclxuICAgICAgICAwXHJcbiAgICAgICk7XHJcbiAgICAgIGZzLnRheEFtb3VudCA9IGNvbXBsZXRlZE9yZGVycy5yZWR1Y2UoKHN1bSwgbykgPT4gc3VtICsgby50YXhBbW91bnQsIDApO1xyXG4gICAgICBmcy5uZXRSZXZlbnVlID0gY29tcGxldGVkT3JkZXJzLnJlZHVjZShcclxuICAgICAgICAoc3VtLCBvKSA9PiBzdW0gKyBvLnRvdGFsQW1vdW50LFxyXG4gICAgICAgIDBcclxuICAgICAgKTtcclxuICAgICAgZnMudG90YWxDb3N0ID0gYWxsSXRlbXNcclxuICAgICAgICAuZmlsdGVyKChpdGVtKSA9PlxyXG4gICAgICAgICAgY29tcGxldGVkT3JkZXJzLnNvbWUoKG8pID0+IG8uaWQgPT09IGl0ZW0uc2FsZXNPcmRlcklkKVxyXG4gICAgICAgIClcclxuICAgICAgICAucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0udW5pdENvc3QsIDApO1xyXG4gICAgICBmcy5ncm9zc1Byb2ZpdCA9IGZzLmdyb3NzUmV2ZW51ZSAtIGZzLnRvdGFsQ29zdDtcclxuICAgICAgZnMuZ3Jvc3NQcm9maXRNYXJnaW4gPVxyXG4gICAgICAgIGZzLmdyb3NzUmV2ZW51ZSA+IDAgPyAoZnMuZ3Jvc3NQcm9maXQgLyBmcy5ncm9zc1JldmVudWUpICogMTAwIDogMDtcclxuXHJcbiAgICAgIC8vID09PSBQcm9kdWN0IFBlcmZvcm1hbmNlID09PVxyXG4gICAgICBjb25zdCBwcCA9IGRhaWx5UmVwb3J0LnByb2R1Y3RQZXJmb3JtYW5jZTtcclxuICAgICAgY29uc3Qgc29sZEl0ZW1zID0gYWxsSXRlbXMuZmlsdGVyKChpdGVtKSA9PlxyXG4gICAgICAgIGNvbXBsZXRlZE9yZGVycy5zb21lKChvKSA9PiBvLmlkID09PSBpdGVtLnNhbGVzT3JkZXJJZClcclxuICAgICAgKTtcclxuICAgICAgcHAudG90YWxQcm9kdWN0c1NvbGQgPSBzb2xkSXRlbXMubGVuZ3RoO1xyXG5cclxuICAgICAgY29uc3QgcHJvZHVjdFNhbGVzOiB7XHJcbiAgICAgICAgW3Byb2R1Y3RJZDogc3RyaW5nXToge1xyXG4gICAgICAgICAgcHJvZHVjdElkOiBzdHJpbmc7XHJcbiAgICAgICAgICBwcm9kdWN0TmFtZTogc3RyaW5nO1xyXG4gICAgICAgICAgcXVhbnRpdHlTb2xkOiBudW1iZXI7XHJcbiAgICAgICAgICByZXZlbnVlOiBudW1iZXI7XHJcbiAgICAgICAgICBwcm9maXQ6IG51bWJlcjtcclxuICAgICAgICB9O1xyXG4gICAgICB9ID0ge307XHJcbiAgICAgIGNvbnN0IHZhcmlhbnRTYWxlczoge1xyXG4gICAgICAgIFt2YXJpYW50SWQ6IHN0cmluZ106IHtcclxuICAgICAgICAgIHZhcmlhbnRJZDogc3RyaW5nO1xyXG4gICAgICAgICAgcHJvZHVjdE5hbWU6IHN0cmluZztcclxuICAgICAgICAgIGNvbG9yTmFtZTogc3RyaW5nO1xyXG4gICAgICAgICAgc3RvcmFnZUNhcGFjaXR5OiBzdHJpbmc7XHJcbiAgICAgICAgICBxdWFudGl0eVNvbGQ6IG51bWJlcjtcclxuICAgICAgICAgIHJldmVudWU6IG51bWJlcjtcclxuICAgICAgICB9O1xyXG4gICAgICB9ID0ge307XHJcblxyXG4gICAgICBzb2xkSXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgIC8vIFByb2R1Y3QgYWdncmVnYXRpb25cclxuICAgICAgICBpZiAoIXByb2R1Y3RTYWxlc1tpdGVtLnByb2R1Y3RJZF0pIHtcclxuICAgICAgICAgIHByb2R1Y3RTYWxlc1tpdGVtLnByb2R1Y3RJZF0gPSB7XHJcbiAgICAgICAgICAgIHByb2R1Y3RJZDogaXRlbS5wcm9kdWN0SWQsXHJcbiAgICAgICAgICAgIHByb2R1Y3ROYW1lOiBpdGVtLnByb2R1Y3ROYW1lLFxyXG4gICAgICAgICAgICBxdWFudGl0eVNvbGQ6IDAsXHJcbiAgICAgICAgICAgIHJldmVudWU6IDAsXHJcbiAgICAgICAgICAgIHByb2ZpdDogMCxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb2R1Y3RTYWxlc1tpdGVtLnByb2R1Y3RJZF0ucXVhbnRpdHlTb2xkICs9IGl0ZW0ucXVhbnRpdHk7XHJcbiAgICAgICAgcHJvZHVjdFNhbGVzW2l0ZW0ucHJvZHVjdElkXS5yZXZlbnVlICs9IGl0ZW0uZmluYWxQcmljZTtcclxuICAgICAgICBwcm9kdWN0U2FsZXNbaXRlbS5wcm9kdWN0SWRdLnByb2ZpdCArPSBpdGVtLmZpbmFsUHJpY2UgLSBpdGVtLnVuaXRDb3N0O1xyXG5cclxuICAgICAgICAvLyBWYXJpYW50IGFnZ3JlZ2F0aW9uXHJcbiAgICAgICAgaWYgKCF2YXJpYW50U2FsZXNbaXRlbS52YXJpYW50SWRdKSB7XHJcbiAgICAgICAgICB2YXJpYW50U2FsZXNbaXRlbS52YXJpYW50SWRdID0ge1xyXG4gICAgICAgICAgICB2YXJpYW50SWQ6IGl0ZW0udmFyaWFudElkLFxyXG4gICAgICAgICAgICBwcm9kdWN0TmFtZTogaXRlbS5wcm9kdWN0TmFtZSxcclxuICAgICAgICAgICAgY29sb3JOYW1lOiBpdGVtLmNvbG9yTmFtZSxcclxuICAgICAgICAgICAgc3RvcmFnZUNhcGFjaXR5OiBpdGVtLnN0b3JhZ2VDYXBhY2l0eSxcclxuICAgICAgICAgICAgcXVhbnRpdHlTb2xkOiAwLFxyXG4gICAgICAgICAgICByZXZlbnVlOiAwLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyaWFudFNhbGVzW2l0ZW0udmFyaWFudElkXS5xdWFudGl0eVNvbGQgKz0gaXRlbS5xdWFudGl0eTtcclxuICAgICAgICB2YXJpYW50U2FsZXNbaXRlbS52YXJpYW50SWRdLnJldmVudWUgKz0gaXRlbS5maW5hbFByaWNlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHBwLnVuaXF1ZVByb2R1Y3RzU29sZCA9IE9iamVjdC5rZXlzKHByb2R1Y3RTYWxlcykubGVuZ3RoO1xyXG4gICAgICBwcC50b3BQcm9kdWN0cyA9IE9iamVjdC52YWx1ZXMocHJvZHVjdFNhbGVzKVxyXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnJldmVudWUgLSBhLnJldmVudWUpXHJcbiAgICAgICAgLnNsaWNlKDAsIDEwKSAvLyBUb3AgMTBcclxuICAgICAgICAubWFwKChwKSA9PiAoe1xyXG4gICAgICAgICAgLi4ucCxcclxuICAgICAgICAgIHByb2ZpdE1hcmdpbjogcC5yZXZlbnVlID4gMCA/IChwLnByb2ZpdCAvIHAucmV2ZW51ZSkgKiAxMDAgOiAwLFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgIHBwLnRvcFZhcmlhbnRzID0gT2JqZWN0LnZhbHVlcyh2YXJpYW50U2FsZXMpXHJcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IGIucmV2ZW51ZSAtIGEucmV2ZW51ZSlcclxuICAgICAgICAuc2xpY2UoMCwgMTApO1xyXG5cclxuICAgICAgLy8gPT09IFN0YWZmIFBlcmZvcm1hbmNlID09PVxyXG4gICAgICBjb25zdCBzcCA9IGRhaWx5UmVwb3J0LnN0YWZmUGVyZm9ybWFuY2U7XHJcbiAgICAgIGNvbnN0IHN0YWZmTWV0cmljczoge1xyXG4gICAgICAgIFtzdGFmZklkOiBzdHJpbmddOiB7XHJcbiAgICAgICAgICBzdGFmZklkOiBzdHJpbmc7XHJcbiAgICAgICAgICBzdGFmZk5hbWU6IHN0cmluZztcclxuICAgICAgICAgIG9yZGVyc1Byb2Nlc3NlZDogbnVtYmVyO1xyXG4gICAgICAgICAgcmV2ZW51ZTogbnVtYmVyO1xyXG4gICAgICAgICAgY3VzdG9tZXJzOiBTZXQ8c3RyaW5nPjtcclxuICAgICAgICB9O1xyXG4gICAgICB9ID0ge307XHJcblxyXG4gICAgICBjb21wbGV0ZWRPcmRlcnMuZm9yRWFjaCgob3JkZXIpID0+IHtcclxuICAgICAgICBpZiAoIXN0YWZmTWV0cmljc1tvcmRlci5zdGFmZklkXSkge1xyXG4gICAgICAgICAgc3RhZmZNZXRyaWNzW29yZGVyLnN0YWZmSWRdID0ge1xyXG4gICAgICAgICAgICBzdGFmZklkOiBvcmRlci5zdGFmZklkLFxyXG4gICAgICAgICAgICBzdGFmZk5hbWU6IG9yZGVyLnN0YWZmTmFtZSB8fCBcIlVua25vd25cIixcclxuICAgICAgICAgICAgb3JkZXJzUHJvY2Vzc2VkOiAwLFxyXG4gICAgICAgICAgICByZXZlbnVlOiAwLFxyXG4gICAgICAgICAgICBjdXN0b21lcnM6IG5ldyBTZXQoKSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1ldHJpYyA9IHN0YWZmTWV0cmljc1tvcmRlci5zdGFmZklkXTtcclxuICAgICAgICBtZXRyaWMub3JkZXJzUHJvY2Vzc2VkKys7XHJcbiAgICAgICAgbWV0cmljLnJldmVudWUgKz0gb3JkZXIudG90YWxBbW91bnQ7XHJcbiAgICAgICAgaWYgKG9yZGVyLmN1c3RvbWVySWQpIHtcclxuICAgICAgICAgIG1ldHJpYy5jdXN0b21lcnMuYWRkKG9yZGVyLmN1c3RvbWVySWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzcC5hY3RpdmVTdGFmZiA9IE9iamVjdC5rZXlzKHN0YWZmTWV0cmljcykubGVuZ3RoO1xyXG4gICAgICBzcC5zdGFmZk1ldHJpY3MgPSBPYmplY3QudmFsdWVzKHN0YWZmTWV0cmljcykubWFwKChtKSA9PiAoe1xyXG4gICAgICAgIHN0YWZmSWQ6IG0uc3RhZmZJZCxcclxuICAgICAgICBzdGFmZk5hbWU6IG0uc3RhZmZOYW1lLFxyXG4gICAgICAgIG9yZGVyc1Byb2Nlc3NlZDogbS5vcmRlcnNQcm9jZXNzZWQsXHJcbiAgICAgICAgcmV2ZW51ZTogbS5yZXZlbnVlLFxyXG4gICAgICAgIGN1c3RvbWVyQ291bnQ6IG0uY3VzdG9tZXJzLnNpemUsXHJcbiAgICAgICAgYXZlcmFnZU9yZGVyVmFsdWU6XHJcbiAgICAgICAgICBtLm9yZGVyc1Byb2Nlc3NlZCA+IDAgPyBtLnJldmVudWUgLyBtLm9yZGVyc1Byb2Nlc3NlZCA6IDAsXHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAgIGlmIChzcC5zdGFmZk1ldHJpY3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IHRvcFNlbGxlciA9IE9iamVjdC52YWx1ZXMoc3RhZmZNZXRyaWNzKS5zb3J0KFxyXG4gICAgICAgICAgKGEsIGIpID0+IGIucmV2ZW51ZSAtIGEucmV2ZW51ZVxyXG4gICAgICAgIClbMF07XHJcbiAgICAgICAgc3AudG9wU2FsZXNQZXJzb24gPSB7XHJcbiAgICAgICAgICBzdGFmZklkOiB0b3BTZWxsZXIuc3RhZmZJZCxcclxuICAgICAgICAgIHN0YWZmTmFtZTogdG9wU2VsbGVyLnN0YWZmTmFtZSxcclxuICAgICAgICAgIHJldmVudWU6IHRvcFNlbGxlci5yZXZlbnVlLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vID09PSBDdXN0b21lciBNZXRyaWNzID09PVxyXG4gICAgICBjb25zdCBjbSA9IGRhaWx5UmVwb3J0LmN1c3RvbWVyTWV0cmljcztcclxuICAgICAgY29uc3QgY3VzdG9tZXJJZHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuICAgICAgY29tcGxldGVkT3JkZXJzLmZvckVhY2goKG8pID0+IHtcclxuICAgICAgICBpZiAoby5jdXN0b21lcklkKSBjdXN0b21lcklkcy5hZGQoby5jdXN0b21lcklkKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNtLnRvdGFsQ3VzdG9tZXJzID0gY3VzdG9tZXJJZHMuc2l6ZTtcclxuICAgICAgXHJcbiAgICAgIC8vID09PSBTYXZlIFJlcG9ydCA9PT1cclxuICAgICAgYXdhaXQgc2V0RG9jKHJlcG9ydFJlZiwgZGFpbHlSZXBvcnQsIHsgbWVyZ2U6IHRydWUgfSk7XHJcblxyXG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBkYWlseVJlcG9ydCB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGdldHRpbmcgb3IgZ2VuZXJhdGluZyBkYWlseSByZXBvcnQgZm9yICR7cmVwb3J0RGF0ZVN0cn06YCwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZXMgYW5kIHNhdmVzIGEgZGFpbHkgc2FsZXMgcmVwb3J0IGZvciBhIGdpdmVuIGRhdGUuXHJcbiAgICogVGhpcyBvcGVyYXRpb24gY2FuIGJlIHJlc291cmNlLWludGVuc2l2ZSBhbmQgc2hvdWxkIGJlIHJ1biBpbiBhIHRydXN0ZWQgZW52aXJvbm1lbnQgKGUuZy4sIGJhY2tlbmQsIGNsb3VkIGZ1bmN0aW9uKS5cclxuICAgKiBAcGFyYW0gcmVwb3J0RGF0ZSBUaGUgZGF0ZSBmb3Igd2hpY2ggdG8gZ2VuZXJhdGUgdGhlIHJlcG9ydC5cclxuICAgKiBAcGFyYW0gdXNlcklkIFRoZSBJRCBvZiB0aGUgdXNlciB0cmlnZ2VyaW5nIHRoZSBnZW5lcmF0aW9uLlxyXG4gICAqL1xyXG4gIGFzeW5jIGdlbmVyYXRlRGFpbHlSZXBvcnQoXHJcbiAgICByZXBvcnREYXRlOiBEYXRlLFxyXG4gICAgdXNlcklkOiBzdHJpbmcgPSBcInN5c3RlbVwiXHJcbiAgKTogUHJvbWlzZTxTZXJ2aWNlUmVzcG9uc2U8RmlyZWJhc2VEYWlseVJlcG9ydD4+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlcG9ydERhdGVTdHIgPSBmb3JtYXQocmVwb3J0RGF0ZSwgXCJ5eXl5LU1NLWRkXCIpO1xyXG4gICAgICBjb25zdCByZXBvcnRUaW1lc3RhbXAgPSBUaW1lc3RhbXAuZnJvbURhdGUocmVwb3J0RGF0ZSk7XHJcbiAgICAgIGNvbnN0IGRhaWx5UmVwb3J0ID0gY3JlYXRlRW1wdHlEYWlseVJlcG9ydChyZXBvcnREYXRlU3RyLCByZXBvcnRUaW1lc3RhbXApO1xyXG4gICAgICBkYWlseVJlcG9ydC5nZW5lcmF0ZWRCeSA9IHVzZXJJZDtcclxuICAgICAgZGFpbHlSZXBvcnQuY3JlYXRlZEJ5ID0gdXNlcklkO1xyXG4gICAgICBkYWlseVJlcG9ydC51cGRhdGVkQnkgPSB1c2VySWQ7XHJcblxyXG4gICAgICBjb25zdCBzdGFydCA9IHN0YXJ0T2ZEYXkocmVwb3J0RGF0ZSk7XHJcbiAgICAgIGNvbnN0IGVuZCA9IGVuZE9mRGF5KHJlcG9ydERhdGUpO1xyXG5cclxuICAgICAgLy8gMS4gRmV0Y2ggYWxsIHNhbGVzIG9yZGVycyBmb3IgdGhlIGdpdmVuIGRheVxyXG4gICAgICBjb25zdCBvcmRlcnNSZWYgPSBjb2xsZWN0aW9uKGRiLCBDT0xMRUNUSU9OUy5TQUxFU19PUkRFUlMpO1xyXG4gICAgICBjb25zdCBxID0gcXVlcnkoXHJcbiAgICAgICAgb3JkZXJzUmVmLFxyXG4gICAgICAgIHdoZXJlKFwib3JkZXJEYXRlXCIsIFwiPj1cIiwgVGltZXN0YW1wLmZyb21EYXRlKHN0YXJ0KSksXHJcbiAgICAgICAgd2hlcmUoXCJvcmRlckRhdGVcIiwgXCI8PVwiLCBUaW1lc3RhbXAuZnJvbURhdGUoZW5kKSlcclxuICAgICAgKTtcclxuICAgICAgY29uc3Qgb3JkZXJTbmFwc2hvdHMgPSBhd2FpdCBnZXREb2NzKHEpO1xyXG4gICAgICBjb25zdCBvcmRlcnMgPSBvcmRlclNuYXBzaG90cy5kb2NzLm1hcChcclxuICAgICAgICAoZG9jKSA9PiAoeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0gYXMgRmlyZWJhc2VTYWxlc09yZGVyKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKG9yZGVycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAvLyBObyBzYWxlcywgc2F2ZSBhbiBlbXB0eSByZXBvcnRcclxuICAgICAgICBjb25zdCBlbXB0eVJlcG9ydFJlZiA9IGRvYyhkYiwgdGhpcy5jb2xsZWN0aW9uTmFtZSwgcmVwb3J0RGF0ZVN0cik7XHJcbiAgICAgICAgYXdhaXQgc2V0RG9jKGVtcHR5UmVwb3J0UmVmLCBkYWlseVJlcG9ydCk7XHJcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogZGFpbHlSZXBvcnQgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gMi4gRmV0Y2ggYWxsIG9yZGVyIGl0ZW1zIGZvciB0aGVzZSBvcmRlcnNcclxuICAgICAgbGV0IGFsbEl0ZW1zOiBGaXJlYmFzZVNhbGVzT3JkZXJJdGVtW10gPSBbXTtcclxuICAgICAgZm9yIChjb25zdCBvcmRlciBvZiBvcmRlcnMpIHtcclxuICAgICAgICBjb25zdCBpdGVtc1JlZiA9IGNvbGxlY3Rpb24oXHJcbiAgICAgICAgICBkYixcclxuICAgICAgICAgIENPTExFQ1RJT05TLlNBTEVTX09SREVSUyxcclxuICAgICAgICAgIG9yZGVyLmlkLFxyXG4gICAgICAgICAgU1VCQ09MTEVDVElPTlMuT1JERVJfSVRFTVNcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zU25hcHNob3QgPSBhd2FpdCBnZXREb2NzKGl0ZW1zUmVmKTtcclxuICAgICAgICBpdGVtc1NuYXBzaG90LmZvckVhY2goKGRvYykgPT4ge1xyXG4gICAgICAgICAgYWxsSXRlbXMucHVzaCh7IGlkOiBkb2MuaWQsIC4uLmRvYy5kYXRhKCkgfSBhcyBGaXJlYmFzZVNhbGVzT3JkZXJJdGVtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gMy4gUHJvY2VzcyBkYXRhIGFuZCBwb3B1bGF0ZSB0aGUgcmVwb3J0IG9iamVjdFxyXG4gICAgICBjb25zdCBjb21wbGV0ZWRPcmRlcnMgPSBvcmRlcnMuZmlsdGVyKChvKSA9PiBvLnN0YXR1cyA9PT0gXCJjb21wbGV0ZWRcIik7XHJcblxyXG4gICAgICAvLyA9PT0gU2FsZXMgTWV0cmljcyA9PT1cclxuICAgICAgY29uc3Qgc20gPSBkYWlseVJlcG9ydC5zYWxlc01ldHJpY3M7XHJcbiAgICAgIHNtLnRvdGFsT3JkZXJzID0gb3JkZXJzLmxlbmd0aDtcclxuICAgICAgc20uY29tcGxldGVkT3JkZXJzID0gY29tcGxldGVkT3JkZXJzLmxlbmd0aDtcclxuICAgICAgc20uY2FuY2VsbGVkT3JkZXJzID0gb3JkZXJzLmZpbHRlcigobykgPT4gby5zdGF0dXMgPT09IFwiY2FuY2VsbGVkXCIpLmxlbmd0aDtcclxuICAgICAgc20ucGVuZGluZ09yZGVycyA9IG9yZGVycy5maWx0ZXIoKG8pID0+IG8uc3RhdHVzLnN0YXJ0c1dpdGgoXCJwZW5kaW5nXCIpKS5sZW5ndGg7XHJcbiAgICAgIHNtLnRvdGFsUmV2ZW51ZSA9IGNvbXBsZXRlZE9yZGVycy5yZWR1Y2UoKHN1bSwgbykgPT4gc3VtICsgby50b3RhbEFtb3VudCwgMCk7XHJcbiAgICAgIHNtLnRvdGFsUXVhbnRpdHlTb2xkID0gY29tcGxldGVkT3JkZXJzLnJlZHVjZSgoc3VtLCBvKSA9PiBzdW0gKyBvLnRvdGFsUXVhbnRpdHksIDApO1xyXG4gICAgICBzbS5hdmVyYWdlT3JkZXJWYWx1ZSA9IHNtLmNvbXBsZXRlZE9yZGVycyA+IDAgPyBzbS50b3RhbFJldmVudWUgLyBzbS5jb21wbGV0ZWRPcmRlcnMgOiAwO1xyXG4gICAgICBcclxuICAgICAgb3JkZXJzLmZvckVhY2gob3JkZXIgPT4ge1xyXG4gICAgICAgICAgLy8gUGF5bWVudCBtZXRob2RzXHJcbiAgICAgICAgICBjb25zdCBwbSA9IG9yZGVyLnBheW1lbnRNZXRob2Q7XHJcbiAgICAgICAgICBpZiAoIXNtLnBheW1lbnRNZXRob2RzW3BtXSkge1xyXG4gICAgICAgICAgICAgIHNtLnBheW1lbnRNZXRob2RzW3BtXSA9IHsgb3JkZXJDb3VudDogMCwgdG90YWxBbW91bnQ6IDAsIHBlcmNlbnRhZ2U6IDAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHNtLnBheW1lbnRNZXRob2RzW3BtXS5vcmRlckNvdW50Kys7XHJcbiAgICAgICAgICBpZiAob3JkZXIuc3RhdHVzID09PSAnY29tcGxldGVkJykge1xyXG4gICAgICAgICAgICAgIHNtLnBheW1lbnRNZXRob2RzW3BtXS50b3RhbEFtb3VudCArPSBvcmRlci50b3RhbEFtb3VudDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBIb3VybHkgYnJlYWtkb3duXHJcbiAgICAgICAgICBjb25zdCBob3VyID0gZ2V0SG91cnMob3JkZXIub3JkZXJEYXRlLnRvRGF0ZSgpKTtcclxuICAgICAgICAgIHNtLmhvdXJseUJyZWFrZG93bltob3VyXS5vcmRlcnMrKztcclxuICAgICAgICAgIGlmKG9yZGVyLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcpIHtcclxuICAgICAgICAgICAgICBzbS5ob3VybHlCcmVha2Rvd25baG91cl0ucmV2ZW51ZSArPSBvcmRlci50b3RhbEFtb3VudDtcclxuICAgICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIC8vIENhbGN1bGF0ZSBwYXltZW50IG1ldGhvZCBwZXJjZW50YWdlc1xyXG4gICAgICBpZiAoc20udG90YWxSZXZlbnVlID4gMCkge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHNtLnBheW1lbnRNZXRob2RzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHNtLnBheW1lbnRNZXRob2RzW2tleV0ucGVyY2VudGFnZSA9IChzbS5wYXltZW50TWV0aG9kc1trZXldLnRvdGFsQW1vdW50IC8gc20udG90YWxSZXZlbnVlKSAqIDEwMDtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gPT09IEZpbmFuY2lhbCBTdW1tYXJ5ID09PVxyXG4gICAgICBjb25zdCBmcyA9IGRhaWx5UmVwb3J0LmZpbmFuY2lhbFN1bW1hcnk7XHJcbiAgICAgIGZzLmdyb3NzUmV2ZW51ZSA9IGNvbXBsZXRlZE9yZGVycy5yZWR1Y2UoKHN1bSwgbykgPT4gc3VtICsgby5zdWJ0b3RhbEFtb3VudCwgMCk7XHJcbiAgICAgIGZzLmRpc2NvdW50QW1vdW50ID0gY29tcGxldGVkT3JkZXJzLnJlZHVjZSgoc3VtLCBvKSA9PiBzdW0gKyBvLmRpc2NvdW50QW1vdW50LCAwKTtcclxuICAgICAgZnMudGF4QW1vdW50ID0gY29tcGxldGVkT3JkZXJzLnJlZHVjZSgoc3VtLCBvKSA9PiBzdW0gKyBvLnRheEFtb3VudCwgMCk7XHJcbiAgICAgIGZzLm5ldFJldmVudWUgPSBjb21wbGV0ZWRPcmRlcnMucmVkdWNlKChzdW0sIG8pID0+IHN1bSArIG8udG90YWxBbW91bnQsIDApO1xyXG4gICAgICBmcy50b3RhbENvc3QgPSBhbGxJdGVtc1xyXG4gICAgICAgIC5maWx0ZXIoaXRlbSA9PiBjb21wbGV0ZWRPcmRlcnMuc29tZShvID0+IG8uaWQgPT09IGl0ZW0uc2FsZXNPcmRlcklkKSlcclxuICAgICAgICAucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0udW5pdENvc3QsIDApO1xyXG4gICAgICBmcy5ncm9zc1Byb2ZpdCA9IGZzLmdyb3NzUmV2ZW51ZSAtIGZzLnRvdGFsQ29zdDtcclxuICAgICAgZnMuZ3Jvc3NQcm9maXRNYXJnaW4gPSBmcy5ncm9zc1JldmVudWUgPiAwID8gKGZzLmdyb3NzUHJvZml0IC8gZnMuZ3Jvc3NSZXZlbnVlKSAqIDEwMCA6IDA7XHJcblxyXG4gICAgICAvLyA9PT0gUHJvZHVjdCBQZXJmb3JtYW5jZSA9PT1cclxuICAgICAgY29uc3QgcHAgPSBkYWlseVJlcG9ydC5wcm9kdWN0UGVyZm9ybWFuY2U7XHJcbiAgICAgIGNvbnN0IHNvbGRJdGVtcyA9IGFsbEl0ZW1zLmZpbHRlcihpdGVtID0+IGNvbXBsZXRlZE9yZGVycy5zb21lKG8gPT4gby5pZCA9PT0gaXRlbS5zYWxlc09yZGVySWQpKTtcclxuICAgICAgcHAudG90YWxQcm9kdWN0c1NvbGQgPSBzb2xkSXRlbXMubGVuZ3RoO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgcHJvZHVjdFNhbGVzOiB7IFtwcm9kdWN0SWQ6IHN0cmluZ106IHsgcHJvZHVjdElkOiBzdHJpbmc7IHByb2R1Y3ROYW1lOiBzdHJpbmc7IHF1YW50aXR5U29sZDogbnVtYmVyOyByZXZlbnVlOiBudW1iZXI7IHByb2ZpdDogbnVtYmVyOyB9IH0gPSB7fTtcclxuICAgICAgY29uc3QgdmFyaWFudFNhbGVzOiB7IFt2YXJpYW50SWQ6IHN0cmluZ106IHsgdmFyaWFudElkOiBzdHJpbmc7IHByb2R1Y3ROYW1lOiBzdHJpbmc7IGNvbG9yTmFtZTogc3RyaW5nOyBzdG9yYWdlQ2FwYWNpdHk6IHN0cmluZzsgcXVhbnRpdHlTb2xkOiBudW1iZXI7IHJldmVudWU6IG51bWJlcjsgfSB9ID0ge307XHJcblxyXG4gICAgICBzb2xkSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgIC8vIFByb2R1Y3QgYWdncmVnYXRpb25cclxuICAgICAgICAgIGlmKCFwcm9kdWN0U2FsZXNbaXRlbS5wcm9kdWN0SWRdKSB7XHJcbiAgICAgICAgICAgICAgcHJvZHVjdFNhbGVzW2l0ZW0ucHJvZHVjdElkXSA9IHsgcHJvZHVjdElkOiBpdGVtLnByb2R1Y3RJZCwgcHJvZHVjdE5hbWU6IGl0ZW0ucHJvZHVjdE5hbWUsIHF1YW50aXR5U29sZDogMCwgcmV2ZW51ZTogMCwgcHJvZml0OiAwIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBwcm9kdWN0U2FsZXNbaXRlbS5wcm9kdWN0SWRdLnF1YW50aXR5U29sZCArPSBpdGVtLnF1YW50aXR5O1xyXG4gICAgICAgICAgcHJvZHVjdFNhbGVzW2l0ZW0ucHJvZHVjdElkXS5yZXZlbnVlICs9IGl0ZW0uZmluYWxQcmljZTtcclxuICAgICAgICAgIHByb2R1Y3RTYWxlc1tpdGVtLnByb2R1Y3RJZF0ucHJvZml0ICs9IChpdGVtLmZpbmFsUHJpY2UgLSBpdGVtLnVuaXRDb3N0KTtcclxuXHJcbiAgICAgICAgICAvLyBWYXJpYW50IGFnZ3JlZ2F0aW9uXHJcbiAgICAgICAgICBpZighdmFyaWFudFNhbGVzW2l0ZW0udmFyaWFudElkXSkge1xyXG4gICAgICAgICAgICAgIHZhcmlhbnRTYWxlc1tpdGVtLnZhcmlhbnRJZF0gPSB7IHZhcmlhbnRJZDogaXRlbS52YXJpYW50SWQsIHByb2R1Y3ROYW1lOiBpdGVtLnByb2R1Y3ROYW1lLCBjb2xvck5hbWU6IGl0ZW0uY29sb3JOYW1lLCBzdG9yYWdlQ2FwYWNpdHk6IGl0ZW0uc3RvcmFnZUNhcGFjaXR5LCBxdWFudGl0eVNvbGQ6IDAsIHJldmVudWU6IDAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhcmlhbnRTYWxlc1tpdGVtLnZhcmlhbnRJZF0ucXVhbnRpdHlTb2xkICs9IGl0ZW0ucXVhbnRpdHk7XHJcbiAgICAgICAgICB2YXJpYW50U2FsZXNbaXRlbS52YXJpYW50SWRdLnJldmVudWUgKz0gaXRlbS5maW5hbFByaWNlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHBwLnVuaXF1ZVByb2R1Y3RzU29sZCA9IE9iamVjdC5rZXlzKHByb2R1Y3RTYWxlcykubGVuZ3RoO1xyXG4gICAgICBwcC50b3BQcm9kdWN0cyA9IE9iamVjdC52YWx1ZXMocHJvZHVjdFNhbGVzKVxyXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnJldmVudWUgLSBhLnJldmVudWUpXHJcbiAgICAgICAgLnNsaWNlKDAsIDEwKSAvLyBUb3AgMTBcclxuICAgICAgICAubWFwKHAgPT4gKHsgLi4ucCwgcHJvZml0TWFyZ2luOiBwLnJldmVudWUgPiAwID8gKHAucHJvZml0IC8gcC5yZXZlbnVlKSAqIDEwMCA6IDAsIHByb2ZpdDogcC5wcm9maXQgfSkpO1xyXG4gICAgICBcclxuICAgICAgcHAudG9wVmFyaWFudHMgPSBPYmplY3QudmFsdWVzKHZhcmlhbnRTYWxlcylcclxuICAgICAgICAuc29ydCgoYSxiKSA9PiBiLnJldmVudWUgLSBhLnJldmVudWUpXHJcbiAgICAgICAgLnNsaWNlKDAsIDEwKTtcclxuXHJcbiAgICAgIC8vID09PSBTdGFmZiBQZXJmb3JtYW5jZSA9PT1cclxuICAgICAgY29uc3Qgc3AgPSBkYWlseVJlcG9ydC5zdGFmZlBlcmZvcm1hbmNlO1xyXG4gICAgICBjb25zdCBzdGFmZk1ldHJpY3M6IHsgW3N0YWZmSWQ6IHN0cmluZ106IHsgc3RhZmZJZDogc3RyaW5nOyBzdGFmZk5hbWU6IHN0cmluZzsgb3JkZXJzUHJvY2Vzc2VkOiBudW1iZXI7IHJldmVudWU6IG51bWJlcjsgY3VzdG9tZXJzOiBTZXQ8c3RyaW5nPjsgfSB9ID0ge307XHJcbiAgICAgIFxyXG4gICAgICBjb21wbGV0ZWRPcmRlcnMuZm9yRWFjaChvcmRlciA9PiB7XHJcbiAgICAgICAgICBpZiAoIXN0YWZmTWV0cmljc1tvcmRlci5zdGFmZklkXSkge1xyXG4gICAgICAgICAgICAgIHN0YWZmTWV0cmljc1tvcmRlci5zdGFmZklkXSA9IHsgc3RhZmZJZDogb3JkZXIuc3RhZmZJZCwgc3RhZmZOYW1lOiBvcmRlci5zdGFmZk5hbWUgfHwgJ1Vua25vd24nLCBvcmRlcnNQcm9jZXNzZWQ6IDAsIHJldmVudWU6IDAsIGN1c3RvbWVyczogbmV3IFNldCgpIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBtZXRyaWMgPSBzdGFmZk1ldHJpY3Nbb3JkZXIuc3RhZmZJZF07XHJcbiAgICAgICAgICBtZXRyaWMub3JkZXJzUHJvY2Vzc2VkKys7XHJcbiAgICAgICAgICBtZXRyaWMucmV2ZW51ZSArPSBvcmRlci50b3RhbEFtb3VudDtcclxuICAgICAgICAgIGlmIChvcmRlci5jdXN0b21lcklkKSB7XHJcbiAgICAgICAgICAgIG1ldHJpYy5jdXN0b21lcnMuYWRkKG9yZGVyLmN1c3RvbWVySWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNwLmFjdGl2ZVN0YWZmID0gT2JqZWN0LmtleXMoc3RhZmZNZXRyaWNzKS5sZW5ndGg7XHJcbiAgICAgIHNwLnN0YWZmTWV0cmljcyA9IE9iamVjdC52YWx1ZXMoc3RhZmZNZXRyaWNzKS5tYXAobSA9PiAoeyBcclxuICAgICAgICAgIHN0YWZmSWQ6IG0uc3RhZmZJZCwgXHJcbiAgICAgICAgICBzdGFmZk5hbWU6IG0uc3RhZmZOYW1lLCBcclxuICAgICAgICAgIG9yZGVyc1Byb2Nlc3NlZDogbS5vcmRlcnNQcm9jZXNzZWQsIFxyXG4gICAgICAgICAgcmV2ZW51ZTogbS5yZXZlbnVlLCBcclxuICAgICAgICAgIGN1c3RvbWVyQ291bnQ6IG0uY3VzdG9tZXJzLnNpemUsIFxyXG4gICAgICAgICAgYXZlcmFnZU9yZGVyVmFsdWU6IG0ub3JkZXJzUHJvY2Vzc2VkID4gMCA/IG0ucmV2ZW51ZSAvIG0ub3JkZXJzUHJvY2Vzc2VkIDogMFxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgIGlmKHNwLnN0YWZmTWV0cmljcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgdG9wU2VsbGVyID0gT2JqZWN0LnZhbHVlcyhzdGFmZk1ldHJpY3MpLnNvcnQoKGEsYikgPT4gYi5yZXZlbnVlIC0gYS5yZXZlbnVlKVswXVxyXG4gICAgICAgIHNwLnRvcFNhbGVzUGVyc29uID0ge1xyXG4gICAgICAgICAgc3RhZmZJZDogdG9wU2VsbGVyLnN0YWZmSWQsXHJcbiAgICAgICAgICBzdGFmZk5hbWU6IHRvcFNlbGxlci5zdGFmZk5hbWUsXHJcbiAgICAgICAgICByZXZlbnVlOiB0b3BTZWxsZXIucmV2ZW51ZSxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyA9PT0gQ3VzdG9tZXIgTWV0cmljcyA9PT1cclxuICAgICAgLy8gVGhpcyBpcyBhIHNpbXBsaWZpZWQgdmVyc2lvbi4gRm9yIGFjY3VyYXRlIG5ldy9yZXR1cm5pbmcsIHdlIG5lZWQgdG8gY2hlY2sgY3VzdG9tZXIncyBoaXN0b3J5LlxyXG4gICAgICBjb25zdCBjbSA9IGRhaWx5UmVwb3J0LmN1c3RvbWVyTWV0cmljcztcclxuICAgICAgY29uc3QgY3VzdG9tZXJJZHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuICAgICAgY29tcGxldGVkT3JkZXJzLmZvckVhY2gobyA9PiB7XHJcbiAgICAgICAgaWYoby5jdXN0b21lcklkKSBjdXN0b21lcklkcy5hZGQoby5jdXN0b21lcklkKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNtLnRvdGFsQ3VzdG9tZXJzID0gY3VzdG9tZXJJZHMuc2l6ZTtcclxuICAgICAgLy8gVGhpcyByZXF1aXJlcyBmZXRjaGluZyBlYWNoIGN1c3RvbWVyIGRvYywgY2FuIGJlIHNsb3cuIEEgYmV0dGVyIGFwcHJvYWNoIGlzIHRvIHVzZSBhIHN1bW1hcnkgZmllbGQgb24gdGhlIGN1c3RvbWVyIGRvY1xyXG4gICAgICAvLyBvciB1c2UgYSBzZXBhcmF0ZSBhbmFseXRpY3Mgc2VydmljZS9jbG91ZCBmdW5jdGlvbi4gRm9yIG5vdywgdGhpcyBpcyBvbWl0dGVkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLlxyXG4gICAgICAvLyBjbS5uZXdDdXN0b21lcnMgPSAuLi5cclxuICAgICAgLy8gY20ucmV0dXJuaW5nQ3VzdG9tZXJzID0gLi4uXHJcbiAgICAgIFxyXG4gICAgICAvLyA9PT0gU2F2ZSBSZXBvcnQgPT09XHJcbiAgICAgIGNvbnN0IHJlcG9ydFJlZiA9IGRvYyhkYiwgdGhpcy5jb2xsZWN0aW9uTmFtZSwgcmVwb3J0RGF0ZVN0cik7XHJcbiAgICAgIGF3YWl0IHNldERvYyhyZXBvcnRSZWYsIGRhaWx5UmVwb3J0LCB7IG1lcmdlOiB0cnVlIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogZGFpbHlSZXBvcnQgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZW5lcmF0aW5nIGRhaWx5IHJlcG9ydDpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZXMgYSBtb250aGx5IHJlcG9ydCBieSBhZ2dyZWdhdGluZyBkYWlseSByZXBvcnRzIGZvciBhIGdpdmVuIG1vbnRoIGFuZCB5ZWFyLlxyXG4gICAqIEBwYXJhbSB5ZWFyIFRoZSB5ZWFyIG9mIHRoZSByZXBvcnQuXHJcbiAgICogQHBhcmFtIG1vbnRoIFRoZSBtb250aCBvZiB0aGUgcmVwb3J0ICgxLTEyKS5cclxuICAgKiBAcGFyYW0gdXNlcklkIFRoZSBJRCBvZiB0aGUgdXNlciB0cmlnZ2VyaW5nIHRoZSBnZW5lcmF0aW9uLlxyXG4gICAqL1xyXG4gIGFzeW5jIGdldE1vbnRobHlSZXBvcnQoXHJcbiAgICB5ZWFyOiBudW1iZXIsXHJcbiAgICBtb250aDogbnVtYmVyLCAvLyAxLTEyXHJcbiAgICB1c2VySWQ6IHN0cmluZyA9IFwic3lzdGVtXCJcclxuICApOiBQcm9taXNlPFNlcnZpY2VSZXNwb25zZTxhbnk+PiB7IC8vIFJlcGxhY2UgJ2FueScgd2l0aCBGaXJlYmFzZU1vbnRobHlSZXBvcnQgbGF0ZXJcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgMSk7XHJcbiAgICAgIGNvbnN0IGVuZERhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMCk7XHJcblxyXG4gICAgICAvLyAxLiBGZXRjaCBhbGwgZGFpbHkgcmVwb3J0cyB3aXRoaW4gdGhlIG1vbnRoXHJcbiAgICAgIGNvbnN0IGRhaWx5UmVwb3J0c1JlZiA9IGNvbGxlY3Rpb24oZGIsIHRoaXMuY29sbGVjdGlvbk5hbWUpO1xyXG4gICAgICBjb25zdCBxID0gcXVlcnkoXHJcbiAgICAgICAgZGFpbHlSZXBvcnRzUmVmLFxyXG4gICAgICAgIHdoZXJlKFwicmVwb3J0VGltZXN0YW1wXCIsIFwiPj1cIiwgVGltZXN0YW1wLmZyb21EYXRlKHN0YXJ0RGF0ZSkpLFxyXG4gICAgICAgIHdoZXJlKFwicmVwb3J0VGltZXN0YW1wXCIsIFwiPD1cIiwgVGltZXN0YW1wLmZyb21EYXRlKGVuZERhdGUpKVxyXG4gICAgICApO1xyXG4gICAgICBcclxuICAgICAgY29uc3Qgc25hcHNob3RzID0gYXdhaXQgZ2V0RG9jcyhxKTtcclxuICAgICAgaWYgKHNuYXBzaG90cy5lbXB0eSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yOiBgS2jDtG5nIGPDsyBk4buvIGxp4buHdSBiw6FvIGPDoW8gY2hvIHRow6FuZyAke21vbnRofS8ke3llYXJ9LmAsXHJcbiAgICAgICAgICBlcnJvckNvZGU6IFwiTk9fREFUQVwiLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRhaWx5UmVwb3J0cyA9IHNuYXBzaG90cy5kb2NzLm1hcChkb2MgPT4gZG9jLmRhdGEoKSBhcyBGaXJlYmFzZURhaWx5UmVwb3J0KTtcclxuXHJcbiAgICAgIC8vIDIuIEFnZ3JlZ2F0ZSB0aGUgZGF0YVxyXG4gICAgICAvLyBOb3RlOiBUaGlzIGlzIGEgc2ltcGxpZmllZCBhZ2dyZWdhdGlvbi4gQSBmdWxsIGltcGxlbWVudGF0aW9uIHdvdWxkIGNyZWF0ZSBhIEZpcmViYXNlTW9udGhseVJlcG9ydCBvYmplY3QuXHJcbiAgICAgIC8vIEZvciBub3csIHdlJ2xsIHJldHVybiBhbiBhZ2dyZWdhdGVkIHN1bW1hcnkuXHJcbiAgICAgIGNvbnN0IG1vbnRobHlTdW1tYXJ5ID0ge1xyXG4gICAgICAgICAgcmVwb3J0TW9udGg6IGAke3llYXJ9LSR7bW9udGgudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWAsXHJcbiAgICAgICAgICB0b3RhbERheXNSZXBvcnRlZDogZGFpbHlSZXBvcnRzLmxlbmd0aCxcclxuICAgICAgICAgIHRvdGFsUmV2ZW51ZTogMCxcclxuICAgICAgICAgIHRvdGFsT3JkZXJzOiAwLFxyXG4gICAgICAgICAgdG90YWxRdWFudGl0eVNvbGQ6IDAsXHJcbiAgICAgICAgICBncm9zc1Byb2ZpdDogMCxcclxuICAgICAgICAgIHRvcFByb2R1Y3RzOiBuZXcgTWFwPHN0cmluZywge3Byb2R1Y3ROYW1lOiBzdHJpbmcsIHF1YW50aXR5U29sZDogbnVtYmVyLCByZXZlbnVlOiBudW1iZXJ9PigpLFxyXG4gICAgICAgICAgc3RhZmZQZXJmb3JtYW5jZTogbmV3IE1hcDxzdHJpbmcsIHtzdGFmZk5hbWU6IHN0cmluZywgcmV2ZW51ZTogbnVtYmVyLCBvcmRlcnNQcm9jZXNzZWQ6IG51bWJlcn0+KClcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChjb25zdCBkYWlseSBvZiBkYWlseVJlcG9ydHMpIHtcclxuICAgICAgICAgIG1vbnRobHlTdW1tYXJ5LnRvdGFsUmV2ZW51ZSArPSBkYWlseS5zYWxlc01ldHJpY3MudG90YWxSZXZlbnVlO1xyXG4gICAgICAgICAgbW9udGhseVN1bW1hcnkudG90YWxPcmRlcnMgKz0gZGFpbHkuc2FsZXNNZXRyaWNzLmNvbXBsZXRlZE9yZGVycztcclxuICAgICAgICAgIG1vbnRobHlTdW1tYXJ5LnRvdGFsUXVhbnRpdHlTb2xkICs9IGRhaWx5LnNhbGVzTWV0cmljcy50b3RhbFF1YW50aXR5U29sZDtcclxuICAgICAgICAgIG1vbnRobHlTdW1tYXJ5Lmdyb3NzUHJvZml0ICs9IGRhaWx5LmZpbmFuY2lhbFN1bW1hcnkuZ3Jvc3NQcm9maXQ7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIEFnZ3JlZ2F0ZSBwcm9kdWN0IHBlcmZvcm1hbmNlXHJcbiAgICAgICAgICBkYWlseS5wcm9kdWN0UGVyZm9ybWFuY2UudG9wUHJvZHVjdHMuZm9yRWFjaChwID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IG1vbnRobHlTdW1tYXJ5LnRvcFByb2R1Y3RzLmdldChwLnByb2R1Y3RJZCk7XHJcbiAgICAgICAgICAgICAgaWYoZXhpc3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgZXhpc3RpbmcucXVhbnRpdHlTb2xkICs9IHAucXVhbnRpdHlTb2xkO1xyXG4gICAgICAgICAgICAgICAgICBleGlzdGluZy5yZXZlbnVlICs9IHAucmV2ZW51ZTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICBtb250aGx5U3VtbWFyeS50b3BQcm9kdWN0cy5zZXQocC5wcm9kdWN0SWQsIHsgcHJvZHVjdE5hbWU6IHAucHJvZHVjdE5hbWUsIHF1YW50aXR5U29sZDogcC5xdWFudGl0eVNvbGQsIHJldmVudWU6IHAucmV2ZW51ZSB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBBZ2dyZWdhdGUgc3RhZmYgcGVyZm9ybWFuY2VcclxuICAgICAgICAgICBkYWlseS5zdGFmZlBlcmZvcm1hbmNlLnN0YWZmTWV0cmljcy5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gbW9udGhseVN1bW1hcnkuc3RhZmZQZXJmb3JtYW5jZS5nZXQocy5zdGFmZklkKTtcclxuICAgICAgICAgICAgICBpZihleGlzdGluZykge1xyXG4gICAgICAgICAgICAgICAgICBleGlzdGluZy5yZXZlbnVlICs9IHMucmV2ZW51ZTtcclxuICAgICAgICAgICAgICAgICAgZXhpc3Rpbmcub3JkZXJzUHJvY2Vzc2VkICs9IHMub3JkZXJzUHJvY2Vzc2VkO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIG1vbnRobHlTdW1tYXJ5LnN0YWZmUGVyZm9ybWFuY2Uuc2V0KHMuc3RhZmZJZCwgeyBzdGFmZk5hbWU6IHMuc3RhZmZOYW1lLCByZXZlbnVlOiBzLnJldmVudWUsIG9yZGVyc1Byb2Nlc3NlZDogcy5vcmRlcnNQcm9jZXNzZWQgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENvbnZlcnQgbWFwcyB0byBhcnJheXMgZm9yIHRoZSBmaW5hbCBvdXRwdXRcclxuICAgICAgY29uc3QgZmluYWxSZXBvcnQgPSB7XHJcbiAgICAgICAgICAuLi5tb250aGx5U3VtbWFyeSxcclxuICAgICAgICAgIHRvcFByb2R1Y3RzOiBBcnJheS5mcm9tKG1vbnRobHlTdW1tYXJ5LnRvcFByb2R1Y3RzLnZhbHVlcygpKS5zb3J0KChhLGIpID0+IGIucmV2ZW51ZSAtIGEucmV2ZW51ZSkuc2xpY2UoMCwgMTApLFxyXG4gICAgICAgICAgc3RhZmZQZXJmb3JtYW5jZTogQXJyYXkuZnJvbShtb250aGx5U3VtbWFyeS5zdGFmZlBlcmZvcm1hbmNlLnZhbHVlcygpKS5zb3J0KChhLGIpID0+IGIucmV2ZW51ZSAtIGEucmV2ZW51ZSlcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IGZpbmFsUmVwb3J0IH07XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZ2VuZXJhdGluZyBtb250aGx5IHJlcG9ydCBmb3IgJHttb250aH0vJHt5ZWFyfTpgLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZXBvcnRzU2VydmljZSA9IG5ldyBSZXBvcnRzU2VydmljZSgpOyAiXSwibmFtZXMiOlsiY29sbGVjdGlvbiIsImRvYyIsImdldERvY3MiLCJxdWVyeSIsIndoZXJlIiwiVGltZXN0YW1wIiwiZ2V0RG9jIiwic2V0RG9jIiwiZGIiLCJCYXNlU2VydmljZSIsIkNPTExFQ1RJT05TIiwiU1VCQ09MTEVDVElPTlMiLCJmb3JtYXQiLCJzdGFydE9mRGF5IiwiZW5kT2ZEYXkiLCJnZXRIb3VycyIsImNyZWF0ZUVtcHR5RGFpbHlSZXBvcnQiLCJyZXBvcnREYXRlU3RyIiwicmVwb3J0VGltZXN0YW1wIiwiaWQiLCJyZXBvcnREYXRlIiwiZ2VuZXJhdGVkQXQiLCJub3ciLCJnZW5lcmF0ZWRCeSIsImlzRmluYWxpemVkIiwic2FsZXNNZXRyaWNzIiwidG90YWxPcmRlcnMiLCJjb21wbGV0ZWRPcmRlcnMiLCJjYW5jZWxsZWRPcmRlcnMiLCJwZW5kaW5nT3JkZXJzIiwidG90YWxSZXZlbnVlIiwidG90YWxRdWFudGl0eVNvbGQiLCJhdmVyYWdlT3JkZXJWYWx1ZSIsInBheW1lbnRNZXRob2RzIiwiaG91cmx5QnJlYWtkb3duIiwiQXJyYXkiLCJmcm9tIiwibGVuZ3RoIiwiXyIsImkiLCJob3VyIiwib3JkZXJzIiwicmV2ZW51ZSIsInByb2R1Y3RQZXJmb3JtYW5jZSIsInRvdGFsUHJvZHVjdHNTb2xkIiwidW5pcXVlUHJvZHVjdHNTb2xkIiwidG9wUHJvZHVjdHMiLCJjYXRlZ29yeUJyZWFrZG93biIsInRvcFZhcmlhbnRzIiwic3RhZmZQZXJmb3JtYW5jZSIsImFjdGl2ZVN0YWZmIiwic3RhZmZNZXRyaWNzIiwidG9wU2FsZXNQZXJzb24iLCJzdGFmZklkIiwic3RhZmZOYW1lIiwiY3VzdG9tZXJNZXRyaWNzIiwidG90YWxDdXN0b21lcnMiLCJuZXdDdXN0b21lcnMiLCJyZXR1cm5pbmdDdXN0b21lcnMiLCJ2aXBDdXN0b21lcnMiLCJjdXN0b21lclNlZ21lbnRzIiwiaW52ZW50b3J5TWV0cmljcyIsIml0ZW1zU29sZCIsInN0b2NrTW92ZW1lbnRzIiwibG93U3RvY2tBbGVydHMiLCJvdXRPZlN0b2NrSXRlbXMiLCJ0b3BNb3ZpbmdJdGVtcyIsInJldHVybk1ldHJpY3MiLCJ0b3RhbFJldHVybnMiLCJyZXR1cm5WYWx1ZSIsInJldHVyblJhdGUiLCJleGNoYW5nZUNvdW50IiwicmVmdW5kQW1vdW50IiwicmV0dXJuUmVhc29ucyIsImZpbmFuY2lhbFN1bW1hcnkiLCJncm9zc1JldmVudWUiLCJkaXNjb3VudEFtb3VudCIsInRheEFtb3VudCIsIm5ldFJldmVudWUiLCJ0b3RhbENvc3QiLCJncm9zc1Byb2ZpdCIsImdyb3NzUHJvZml0TWFyZ2luIiwiY29tcGFyYXRpdmVNZXRyaWNzIiwicHJldmlvdXNEYXkiLCJyZXZlbnVlR3Jvd3RoIiwib3JkZXJHcm93dGgiLCJjdXN0b21lckdyb3d0aCIsInByZXZpb3VzV2VlayIsImF2ZXJhZ2VPcmRlclZhbHVlR3Jvd3RoIiwibW9udGhUb0RhdGUiLCJ0YXJnZXRQcm9ncmVzcyIsIm9wZXJhdGlvbmFsTWV0cmljcyIsImF2ZXJhZ2VJdGVtc1Blck9yZGVyIiwib3JkZXJzUGVyU3RhZmYiLCJyZXZlbnVlUGVyU3RhZmYiLCJwZWFrSG91cnMiLCJxdWFsaXR5TWV0cmljcyIsImN1c3RvbWVyQ29tcGxhaW50cyIsIndhcnJhbnR5SXNzdWVzIiwicHJvZHVjdERlZmVjdHMiLCJjcmVhdGVkQXQiLCJ1cGRhdGVkQXQiLCJjcmVhdGVkQnkiLCJ1cGRhdGVkQnkiLCJSZXBvcnRzU2VydmljZSIsImdldE9yR2VuZXJhdGVEYWlseVJlcG9ydCIsInVzZXJJZCIsInJlcG9ydFJlZiIsImNvbGxlY3Rpb25OYW1lIiwicmVwb3J0RG9jIiwiZXhpc3RzIiwiY29uc29sZSIsImxvZyIsInN1Y2Nlc3MiLCJkYXRhIiwiZGFpbHlSZXBvcnQiLCJmcm9tRGF0ZSIsInN0YXJ0IiwiZW5kIiwib3JkZXJzUmVmIiwiU0FMRVNfT1JERVJTIiwicSIsIm9yZGVyU25hcHNob3RzIiwiZG9jcyIsIm1hcCIsImFsbEl0ZW1zIiwib3JkZXIiLCJpdGVtc1JlZiIsIk9SREVSX0lURU1TIiwiaXRlbXNTbmFwc2hvdCIsImZvckVhY2giLCJwdXNoIiwiZmlsdGVyIiwibyIsInN0YXR1cyIsInNtIiwic3RhcnRzV2l0aCIsInJlZHVjZSIsInN1bSIsInRvdGFsQW1vdW50IiwidG90YWxRdWFudGl0eSIsInBtIiwicGF5bWVudE1ldGhvZCIsIm9yZGVyQ291bnQiLCJwZXJjZW50YWdlIiwib3JkZXJEYXRlIiwidG9EYXRlIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImZzIiwic3VidG90YWxBbW91bnQiLCJpdGVtIiwic29tZSIsInNhbGVzT3JkZXJJZCIsInVuaXRDb3N0IiwicHAiLCJzb2xkSXRlbXMiLCJwcm9kdWN0U2FsZXMiLCJ2YXJpYW50U2FsZXMiLCJwcm9kdWN0SWQiLCJwcm9kdWN0TmFtZSIsInF1YW50aXR5U29sZCIsInByb2ZpdCIsInF1YW50aXR5IiwiZmluYWxQcmljZSIsInZhcmlhbnRJZCIsImNvbG9yTmFtZSIsInN0b3JhZ2VDYXBhY2l0eSIsInZhbHVlcyIsInNvcnQiLCJhIiwiYiIsInNsaWNlIiwicCIsInByb2ZpdE1hcmdpbiIsInNwIiwib3JkZXJzUHJvY2Vzc2VkIiwiY3VzdG9tZXJzIiwiU2V0IiwibWV0cmljIiwiY3VzdG9tZXJJZCIsImFkZCIsIm0iLCJjdXN0b21lckNvdW50Iiwic2l6ZSIsInRvcFNlbGxlciIsImNtIiwiY3VzdG9tZXJJZHMiLCJtZXJnZSIsImVycm9yIiwiaGFuZGxlRXJyb3IiLCJnZW5lcmF0ZURhaWx5UmVwb3J0IiwiZW1wdHlSZXBvcnRSZWYiLCJnZXRNb250aGx5UmVwb3J0IiwieWVhciIsIm1vbnRoIiwic3RhcnREYXRlIiwiRGF0ZSIsImVuZERhdGUiLCJkYWlseVJlcG9ydHNSZWYiLCJzbmFwc2hvdHMiLCJlbXB0eSIsImVycm9yQ29kZSIsImRhaWx5UmVwb3J0cyIsIm1vbnRobHlTdW1tYXJ5IiwicmVwb3J0TW9udGgiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwidG90YWxEYXlzUmVwb3J0ZWQiLCJNYXAiLCJkYWlseSIsImV4aXN0aW5nIiwiZ2V0Iiwic2V0IiwicyIsImZpbmFsUmVwb3J0IiwiY29uc3RydWN0b3IiLCJSRVBPUlRTIiwicmVwb3J0c1NlcnZpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firebase/services/reports.service.ts\n"));

/***/ })

});