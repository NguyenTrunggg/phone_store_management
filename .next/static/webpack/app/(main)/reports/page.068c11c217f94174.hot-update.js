"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(main)/reports/page",{

/***/ "(app-pages-browser)/./src/lib/firebase/services/reports.service.ts":
/*!******************************************************!*\
  !*** ./src/lib/firebase/services/reports.service.ts ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReportsService: function() { return /* binding */ ReportsService; },\n/* harmony export */   reportsService: function() { return /* binding */ reportsService; }\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.service */ \"(app-pages-browser)/./src/lib/firebase/services/base.service.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/constants */ \"(app-pages-browser)/./src/constants/index.ts\");\n/* harmony import */ var _barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=endOfDay,format,getHours,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/format/index.js\");\n/* harmony import */ var _barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=endOfDay,format,getHours,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/startOfDay/index.js\");\n/* harmony import */ var _barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=endOfDay,format,getHours,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/endOfDay/index.js\");\n/* harmony import */ var _barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=endOfDay,format,getHours,startOfDay!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/esm/getHours/index.js\");\n\n\n\n\n\n// A helper to create an empty daily report structure\nconst createEmptyDailyReport = (reportDateStr, reportTimestamp)=>{\n    return {\n        id: reportDateStr,\n        reportDate: reportDateStr,\n        reportTimestamp: reportTimestamp,\n        generatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now(),\n        generatedBy: \"system\",\n        isFinalized: false,\n        salesMetrics: {\n            totalOrders: 0,\n            completedOrders: 0,\n            cancelledOrders: 0,\n            pendingOrders: 0,\n            totalRevenue: 0,\n            totalQuantitySold: 0,\n            averageOrderValue: 0,\n            paymentMethods: {},\n            hourlyBreakdown: Array.from({\n                length: 24\n            }, (_, i)=>({\n                    hour: i,\n                    orders: 0,\n                    revenue: 0\n                }))\n        },\n        productPerformance: {\n            totalProductsSold: 0,\n            uniqueProductsSold: 0,\n            topProducts: [],\n            categoryBreakdown: {},\n            topVariants: []\n        },\n        staffPerformance: {\n            activeStaff: 0,\n            staffMetrics: [],\n            topSalesPerson: {\n                staffId: \"\",\n                staffName: \"\",\n                revenue: 0\n            }\n        },\n        customerMetrics: {\n            totalCustomers: 0,\n            newCustomers: 0,\n            returningCustomers: 0,\n            vipCustomers: 0,\n            customerSegments: {}\n        },\n        inventoryMetrics: {\n            itemsSold: 0,\n            stockMovements: 0,\n            lowStockAlerts: 0,\n            outOfStockItems: 0,\n            topMovingItems: []\n        },\n        returnMetrics: {\n            totalReturns: 0,\n            returnValue: 0,\n            returnRate: 0,\n            exchangeCount: 0,\n            refundAmount: 0,\n            returnReasons: {}\n        },\n        financialSummary: {\n            grossRevenue: 0,\n            discountAmount: 0,\n            taxAmount: 0,\n            netRevenue: 0,\n            totalCost: 0,\n            grossProfit: 0,\n            grossProfitMargin: 0\n        },\n        comparativeMetrics: {\n            previousDay: {\n                revenueGrowth: 0,\n                orderGrowth: 0,\n                customerGrowth: 0\n            },\n            previousWeek: {\n                revenueGrowth: 0,\n                orderGrowth: 0,\n                averageOrderValueGrowth: 0\n            },\n            monthToDate: {\n                totalRevenue: 0,\n                totalOrders: 0,\n                targetProgress: 0\n            }\n        },\n        operationalMetrics: {\n            averageItemsPerOrder: 0,\n            ordersPerStaff: 0,\n            revenuePerStaff: 0,\n            peakHours: []\n        },\n        qualityMetrics: {\n            customerComplaints: 0,\n            warrantyIssues: 0,\n            productDefects: 0\n        },\n        createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now(),\n        updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.now(),\n        createdBy: \"system\",\n        updatedBy: \"system\"\n    };\n};\nclass ReportsService extends _base_service__WEBPACK_IMPORTED_MODULE_2__.BaseService {\n    /**\r\n   * Gets a daily report for a specific date. If the report doesn't exist,\r\n   * it generates a new one, saves it, and returns it.\r\n   * This is the primary method to be called from the frontend.\r\n   * @param reportDate The date for which to get or generate the report.\r\n   * @param userId The ID of the user triggering the action.\r\n   */ async getOrGenerateDailyReport(reportDate) {\n        let userId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"system\";\n        const reportDateStr = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(reportDate, \"yyyy-MM-dd\");\n        const reportRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, this.collectionName, reportDateStr);\n        try {\n            // First, try to fetch the existing report.\n            const reportDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc)(reportRef);\n            if (reportDoc.exists()) {\n                console.log(\"Fetched daily report for \".concat(reportDateStr, \" from cache.\"));\n                return {\n                    success: true,\n                    data: {\n                        id: reportDoc.id,\n                        ...reportDoc.data()\n                    }\n                };\n            }\n            console.log(\"Report for \".concat(reportDateStr, \" not found. Generating new report...\"));\n            // If it doesn't exist, proceed with generation.\n            const dailyReport = createEmptyDailyReport(reportDateStr, firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(reportDate));\n            dailyReport.generatedBy = userId;\n            dailyReport.createdBy = userId;\n            dailyReport.updatedBy = userId;\n            const start = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(reportDate);\n            const end = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(reportDate);\n            // 1. Fetch all sales orders for the given day\n            const ordersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.SALES_ORDERS);\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(ordersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(start)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(end)));\n            const orderSnapshots = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const orders = orderSnapshots.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            // If there are no orders, we still save an empty report to cache this fact.\n            if (orders.length === 0) {\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(reportRef, dailyReport);\n                return {\n                    success: true,\n                    data: dailyReport\n                };\n            }\n            // 2. Fetch all order items for these orders\n            let allItems = [];\n            for (const order of orders){\n                const itemsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.SALES_ORDERS, order.id, _constants__WEBPACK_IMPORTED_MODULE_3__.SUBCOLLECTIONS.ITEMS);\n                const itemsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(itemsRef);\n                itemsSnapshot.forEach((doc)=>{\n                    allItems.push({\n                        id: doc.id,\n                        ...doc.data()\n                    });\n                });\n            }\n            // 3. Process data and populate the report object (Full logic is preserved)\n            const completedOrders = orders.filter((o)=>o.status === \"completed\");\n            // === Sales Metrics ===\n            const sm = dailyReport.salesMetrics;\n            sm.totalOrders = orders.length;\n            sm.completedOrders = completedOrders.length;\n            sm.cancelledOrders = orders.filter((o)=>o.status === \"cancelled\").length;\n            sm.pendingOrders = orders.filter((o)=>o.status.startsWith(\"pending\")).length;\n            sm.totalRevenue = completedOrders.reduce((sum, o)=>sum + o.totalAmount, 0);\n            sm.totalQuantitySold = completedOrders.reduce((sum, o)=>sum + o.totalQuantity, 0);\n            sm.averageOrderValue = sm.completedOrders > 0 ? sm.totalRevenue / sm.completedOrders : 0;\n            orders.forEach((order)=>{\n                // Payment methods\n                const pm = order.paymentMethod;\n                if (!sm.paymentMethods[pm]) {\n                    sm.paymentMethods[pm] = {\n                        orderCount: 0,\n                        totalAmount: 0,\n                        percentage: 0\n                    };\n                }\n                sm.paymentMethods[pm].orderCount++;\n                if (order.status === \"completed\") {\n                    sm.paymentMethods[pm].totalAmount += order.totalAmount;\n                }\n                // Hourly breakdown\n                const hour = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(order.orderDate.toDate());\n                sm.hourlyBreakdown[hour].orders++;\n                if (order.status === \"completed\") {\n                    sm.hourlyBreakdown[hour].revenue += order.totalAmount;\n                }\n            });\n            // Calculate payment method percentages\n            if (sm.totalRevenue > 0) {\n                Object.keys(sm.paymentMethods).forEach((key)=>{\n                    sm.paymentMethods[key].percentage = sm.paymentMethods[key].totalAmount / sm.totalRevenue * 100;\n                });\n            }\n            // === Financial Summary ===\n            const fs = dailyReport.financialSummary;\n            fs.grossRevenue = completedOrders.reduce((sum, o)=>sum + o.subtotalAmount, 0);\n            fs.discountAmount = completedOrders.reduce((sum, o)=>sum + o.discountAmount, 0);\n            fs.taxAmount = completedOrders.reduce((sum, o)=>sum + o.taxAmount, 0);\n            fs.netRevenue = completedOrders.reduce((sum, o)=>sum + o.totalAmount, 0);\n            fs.totalCost = allItems.filter((item)=>completedOrders.some((o)=>o.id === item.salesOrderId)).reduce((sum, item)=>sum + item.unitCost, 0);\n            fs.grossProfit = fs.grossRevenue - fs.totalCost;\n            fs.grossProfitMargin = fs.grossRevenue > 0 ? fs.grossProfit / fs.grossRevenue * 100 : 0;\n            // === Product Performance ===\n            const pp = dailyReport.productPerformance;\n            const soldItems = allItems.filter((item)=>completedOrders.some((o)=>o.id === item.salesOrderId));\n            pp.totalProductsSold = soldItems.length;\n            const productSales = {};\n            const variantSales = {};\n            soldItems.forEach((item)=>{\n                // Product aggregation\n                if (!productSales[item.productId]) {\n                    productSales[item.productId] = {\n                        productId: item.productId,\n                        productName: item.productName,\n                        quantitySold: 0,\n                        revenue: 0,\n                        profit: 0\n                    };\n                }\n                productSales[item.productId].quantitySold += item.quantity;\n                productSales[item.productId].revenue += item.finalPrice;\n                productSales[item.productId].profit += item.finalPrice - item.unitCost;\n                // Variant aggregation\n                if (!variantSales[item.variantId]) {\n                    variantSales[item.variantId] = {\n                        variantId: item.variantId,\n                        productName: item.productName,\n                        colorName: item.colorName,\n                        storageCapacity: item.storageCapacity,\n                        quantitySold: 0,\n                        revenue: 0\n                    };\n                }\n                variantSales[item.variantId].quantitySold += item.quantity;\n                variantSales[item.variantId].revenue += item.finalPrice;\n            });\n            pp.uniqueProductsSold = Object.keys(productSales).length;\n            pp.topProducts = Object.values(productSales).sort((a, b)=>b.revenue - a.revenue).slice(0, 10) // Top 10\n            .map((p)=>({\n                    ...p,\n                    profitMargin: p.revenue > 0 ? p.profit / p.revenue * 100 : 0\n                }));\n            pp.topVariants = Object.values(variantSales).sort((a, b)=>b.revenue - a.revenue).slice(0, 10);\n            // === Staff Performance ===\n            const sp = dailyReport.staffPerformance;\n            const staffMetrics = {};\n            completedOrders.forEach((order)=>{\n                if (!staffMetrics[order.staffId]) {\n                    staffMetrics[order.staffId] = {\n                        staffId: order.staffId,\n                        staffName: order.staffName || \"Unknown\",\n                        ordersProcessed: 0,\n                        revenue: 0,\n                        customers: new Set()\n                    };\n                }\n                const metric = staffMetrics[order.staffId];\n                metric.ordersProcessed++;\n                metric.revenue += order.totalAmount;\n                if (order.customerId) {\n                    metric.customers.add(order.customerId);\n                }\n            });\n            sp.activeStaff = Object.keys(staffMetrics).length;\n            sp.staffMetrics = Object.values(staffMetrics).map((m)=>({\n                    staffId: m.staffId,\n                    staffName: m.staffName,\n                    ordersProcessed: m.ordersProcessed,\n                    revenue: m.revenue,\n                    customerCount: m.customers.size,\n                    averageOrderValue: m.ordersProcessed > 0 ? m.revenue / m.ordersProcessed : 0\n                }));\n            if (sp.staffMetrics.length > 0) {\n                const topSeller = Object.values(staffMetrics).sort((a, b)=>b.revenue - a.revenue)[0];\n                sp.topSalesPerson = {\n                    staffId: topSeller.staffId,\n                    staffName: topSeller.staffName,\n                    revenue: topSeller.revenue\n                };\n            }\n            // === Customer Metrics ===\n            const cm = dailyReport.customerMetrics;\n            const customerIds = new Set();\n            completedOrders.forEach((o)=>{\n                if (o.customerId) customerIds.add(o.customerId);\n            });\n            cm.totalCustomers = customerIds.size;\n            // === Save Report ===\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(reportRef, dailyReport, {\n                merge: true\n            });\n            return {\n                success: true,\n                data: dailyReport\n            };\n        } catch (error) {\n            console.error(\"Error getting or generating daily report for \".concat(reportDateStr, \":\"), error);\n            return this.handleError(error);\n        }\n    }\n    /**\r\n   * Generates and saves a daily sales report for a given date.\r\n   * This operation can be resource-intensive and should be run in a trusted environment (e.g., backend, cloud function).\r\n   * @param reportDate The date for which to generate the report.\r\n   * @param userId The ID of the user triggering the generation.\r\n   */ async generateDailyReport(reportDate) {\n        let userId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"system\";\n        try {\n            const reportDateStr = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(reportDate, \"yyyy-MM-dd\");\n            const reportTimestamp = firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(reportDate);\n            const dailyReport = createEmptyDailyReport(reportDateStr, reportTimestamp);\n            dailyReport.generatedBy = userId;\n            dailyReport.createdBy = userId;\n            dailyReport.updatedBy = userId;\n            const start = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(reportDate);\n            const end = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(reportDate);\n            // 1. Fetch all sales orders for the given day\n            const ordersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.SALES_ORDERS);\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(ordersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(start)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(end)));\n            const orderSnapshots = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            const orders = orderSnapshots.docs.map((doc)=>({\n                    id: doc.id,\n                    ...doc.data()\n                }));\n            if (orders.length === 0) {\n                // No sales, save an empty report\n                const emptyReportRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, this.collectionName, reportDateStr);\n                await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(emptyReportRef, dailyReport);\n                return {\n                    success: true,\n                    data: dailyReport\n                };\n            }\n            // 2. Fetch all order items for these orders\n            let allItems = [];\n            for (const order of orders){\n                const itemsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.SALES_ORDERS, order.id, _constants__WEBPACK_IMPORTED_MODULE_3__.SUBCOLLECTIONS.ORDER_ITEMS);\n                const itemsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(itemsRef);\n                itemsSnapshot.forEach((doc)=>{\n                    allItems.push({\n                        id: doc.id,\n                        ...doc.data()\n                    });\n                });\n            }\n            // 3. Process data and populate the report object\n            const completedOrders = orders.filter((o)=>o.status === \"completed\");\n            // === Sales Metrics ===\n            const sm = dailyReport.salesMetrics;\n            sm.totalOrders = orders.length;\n            sm.completedOrders = completedOrders.length;\n            sm.cancelledOrders = orders.filter((o)=>o.status === \"cancelled\").length;\n            sm.pendingOrders = orders.filter((o)=>o.status.startsWith(\"pending\")).length;\n            sm.totalRevenue = completedOrders.reduce((sum, o)=>sum + o.totalAmount, 0);\n            sm.totalQuantitySold = completedOrders.reduce((sum, o)=>sum + o.totalQuantity, 0);\n            sm.averageOrderValue = sm.completedOrders > 0 ? sm.totalRevenue / sm.completedOrders : 0;\n            orders.forEach((order)=>{\n                // Payment methods\n                const pm = order.paymentMethod;\n                if (!sm.paymentMethods[pm]) {\n                    sm.paymentMethods[pm] = {\n                        orderCount: 0,\n                        totalAmount: 0,\n                        percentage: 0\n                    };\n                }\n                sm.paymentMethods[pm].orderCount++;\n                if (order.status === \"completed\") {\n                    sm.paymentMethods[pm].totalAmount += order.totalAmount;\n                }\n                // Hourly breakdown\n                const hour = (0,_barrel_optimize_names_endOfDay_format_getHours_startOfDay_date_fns__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(order.orderDate.toDate());\n                sm.hourlyBreakdown[hour].orders++;\n                if (order.status === \"completed\") {\n                    sm.hourlyBreakdown[hour].revenue += order.totalAmount;\n                }\n            });\n            // Calculate payment method percentages\n            if (sm.totalRevenue > 0) {\n                Object.keys(sm.paymentMethods).forEach((key)=>{\n                    sm.paymentMethods[key].percentage = sm.paymentMethods[key].totalAmount / sm.totalRevenue * 100;\n                });\n            }\n            // === Financial Summary ===\n            const fs = dailyReport.financialSummary;\n            fs.grossRevenue = completedOrders.reduce((sum, o)=>sum + o.subtotalAmount, 0);\n            fs.discountAmount = completedOrders.reduce((sum, o)=>sum + o.discountAmount, 0);\n            fs.taxAmount = completedOrders.reduce((sum, o)=>sum + o.taxAmount, 0);\n            fs.netRevenue = completedOrders.reduce((sum, o)=>sum + o.totalAmount, 0);\n            fs.totalCost = allItems.filter((item)=>completedOrders.some((o)=>o.id === item.salesOrderId)).reduce((sum, item)=>sum + item.unitCost, 0);\n            fs.grossProfit = fs.grossRevenue - fs.totalCost;\n            fs.grossProfitMargin = fs.grossRevenue > 0 ? fs.grossProfit / fs.grossRevenue * 100 : 0;\n            // === Product Performance ===\n            const pp = dailyReport.productPerformance;\n            const soldItems = allItems.filter((item)=>completedOrders.some((o)=>o.id === item.salesOrderId));\n            pp.totalProductsSold = soldItems.length;\n            const productSales = {};\n            const variantSales = {};\n            soldItems.forEach((item)=>{\n                // Product aggregation\n                if (!productSales[item.productId]) {\n                    productSales[item.productId] = {\n                        productId: item.productId,\n                        productName: item.productName,\n                        quantitySold: 0,\n                        revenue: 0,\n                        profit: 0\n                    };\n                }\n                productSales[item.productId].quantitySold += item.quantity;\n                productSales[item.productId].revenue += item.finalPrice;\n                productSales[item.productId].profit += item.finalPrice - item.unitCost;\n                // Variant aggregation\n                if (!variantSales[item.variantId]) {\n                    variantSales[item.variantId] = {\n                        variantId: item.variantId,\n                        productName: item.productName,\n                        colorName: item.colorName,\n                        storageCapacity: item.storageCapacity,\n                        quantitySold: 0,\n                        revenue: 0\n                    };\n                }\n                variantSales[item.variantId].quantitySold += item.quantity;\n                variantSales[item.variantId].revenue += item.finalPrice;\n            });\n            pp.uniqueProductsSold = Object.keys(productSales).length;\n            pp.topProducts = Object.values(productSales).sort((a, b)=>b.revenue - a.revenue).slice(0, 10) // Top 10\n            .map((p)=>({\n                    ...p,\n                    profitMargin: p.revenue > 0 ? p.profit / p.revenue * 100 : 0,\n                    profit: p.profit\n                }));\n            pp.topVariants = Object.values(variantSales).sort((a, b)=>b.revenue - a.revenue).slice(0, 10);\n            // === Staff Performance ===\n            const sp = dailyReport.staffPerformance;\n            const staffMetrics = {};\n            completedOrders.forEach((order)=>{\n                if (!staffMetrics[order.staffId]) {\n                    staffMetrics[order.staffId] = {\n                        staffId: order.staffId,\n                        staffName: order.staffName || \"Unknown\",\n                        ordersProcessed: 0,\n                        revenue: 0,\n                        customers: new Set()\n                    };\n                }\n                const metric = staffMetrics[order.staffId];\n                metric.ordersProcessed++;\n                metric.revenue += order.totalAmount;\n                if (order.customerId) {\n                    metric.customers.add(order.customerId);\n                }\n            });\n            sp.activeStaff = Object.keys(staffMetrics).length;\n            sp.staffMetrics = Object.values(staffMetrics).map((m)=>({\n                    staffId: m.staffId,\n                    staffName: m.staffName,\n                    ordersProcessed: m.ordersProcessed,\n                    revenue: m.revenue,\n                    customerCount: m.customers.size,\n                    averageOrderValue: m.ordersProcessed > 0 ? m.revenue / m.ordersProcessed : 0\n                }));\n            if (sp.staffMetrics.length > 0) {\n                const topSeller = Object.values(staffMetrics).sort((a, b)=>b.revenue - a.revenue)[0];\n                sp.topSalesPerson = {\n                    staffId: topSeller.staffId,\n                    staffName: topSeller.staffName,\n                    revenue: topSeller.revenue\n                };\n            }\n            // === Customer Metrics ===\n            // This is a simplified version. For accurate new/returning, we need to check customer's history.\n            const cm = dailyReport.customerMetrics;\n            const customerIds = new Set();\n            completedOrders.forEach((o)=>{\n                if (o.customerId) customerIds.add(o.customerId);\n            });\n            cm.totalCustomers = customerIds.size;\n            // This requires fetching each customer doc, can be slow. A better approach is to use a summary field on the customer doc\n            // or use a separate analytics service/cloud function. For now, this is omitted for performance reasons.\n            // cm.newCustomers = ...\n            // cm.returningCustomers = ...\n            // === Save Report ===\n            const reportRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, this.collectionName, reportDateStr);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc)(reportRef, dailyReport, {\n                merge: true\n            });\n            return {\n                success: true,\n                data: dailyReport\n            };\n        } catch (error) {\n            console.error(\"Error generating daily report:\", error);\n            return this.handleError(error);\n        }\n    }\n    /**\r\n   * Generates a monthly report by aggregating daily reports for a given month and year.\r\n   * @param year The year of the report.\r\n   * @param month The month of the report (1-12).\r\n   * @param userId The ID of the user triggering the generation.\r\n   */ async getMonthlyReport(year, month) {\n        let userId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"system\";\n        try {\n            const startDate = new Date(year, month - 1, 1);\n            const endDate = new Date(year, month, 0);\n            // 1. Fetch all daily reports within the month\n            const dailyReportsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, this.collectionName);\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(dailyReportsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"reportTimestamp\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(startDate)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"reportTimestamp\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(endDate)));\n            const snapshots = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n            if (snapshots.empty) {\n                return {\n                    success: false,\n                    error: \"Kh\\xf4ng c\\xf3 dữ liệu b\\xe1o c\\xe1o cho th\\xe1ng \".concat(month, \"/\").concat(year, \".\"),\n                    errorCode: \"NO_DATA\"\n                };\n            }\n            const dailyReports = snapshots.docs.map((doc)=>doc.data());\n            // 2. Aggregate the data\n            // Note: This is a simplified aggregation. A full implementation would create a FirebaseMonthlyReport object.\n            // For now, we'll return an aggregated summary.\n            const monthlySummary = {\n                reportMonth: \"\".concat(year, \"-\").concat(month.toString().padStart(2, \"0\")),\n                totalDaysReported: dailyReports.length,\n                totalRevenue: 0,\n                totalOrders: 0,\n                totalQuantitySold: 0,\n                grossProfit: 0,\n                topProducts: new Map(),\n                staffPerformance: new Map()\n            };\n            for (const daily of dailyReports){\n                monthlySummary.totalRevenue += daily.salesMetrics.totalRevenue;\n                monthlySummary.totalOrders += daily.salesMetrics.completedOrders;\n                monthlySummary.totalQuantitySold += daily.salesMetrics.totalQuantitySold;\n                monthlySummary.grossProfit += daily.financialSummary.grossProfit;\n                // Aggregate product performance\n                daily.productPerformance.topProducts.forEach((p)=>{\n                    const existing = monthlySummary.topProducts.get(p.productId);\n                    if (existing) {\n                        existing.quantitySold += p.quantitySold;\n                        existing.revenue += p.revenue;\n                    } else {\n                        monthlySummary.topProducts.set(p.productId, {\n                            productName: p.productName,\n                            quantitySold: p.quantitySold,\n                            revenue: p.revenue\n                        });\n                    }\n                });\n                // Aggregate staff performance\n                daily.staffPerformance.staffMetrics.forEach((s)=>{\n                    const existing = monthlySummary.staffPerformance.get(s.staffId);\n                    if (existing) {\n                        existing.revenue += s.revenue;\n                        existing.ordersProcessed += s.ordersProcessed;\n                    } else {\n                        monthlySummary.staffPerformance.set(s.staffId, {\n                            staffName: s.staffName,\n                            revenue: s.revenue,\n                            ordersProcessed: s.ordersProcessed\n                        });\n                    }\n                });\n            }\n            // Convert maps to arrays for the final output\n            const finalReport = {\n                ...monthlySummary,\n                topProducts: Array.from(monthlySummary.topProducts.values()).sort((a, b)=>b.revenue - a.revenue).slice(0, 10),\n                staffPerformance: Array.from(monthlySummary.staffPerformance.values()).sort((a, b)=>b.revenue - a.revenue)\n            };\n            return {\n                success: true,\n                data: finalReport\n            };\n        } catch (error) {\n            console.error(\"Error generating monthly report for \".concat(month, \"/\").concat(year, \":\"), error);\n            return this.handleError(error);\n        }\n    }\n    constructor(){\n        super(_constants__WEBPACK_IMPORTED_MODULE_3__.COLLECTIONS.REPORTS);\n    }\n}\nconst reportsService = new ReportsService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firebase/services/reports.service.ts\n"));

/***/ })

});