"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(main)/dashboard/page",{

/***/ "(app-pages-browser)/./src/lib/firebase/services/dashboard.service.ts":
/*!********************************************************!*\
  !*** ./src/lib/firebase/services/dashboard.service.ts ***!
  \********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DashboardService: function() { return /* binding */ DashboardService; },\n/* harmony export */   dashboardService: function() { return /* binding */ dashboardService; }\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n/* harmony import */ var _base_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.service */ \"(app-pages-browser)/./src/lib/firebase/services/base.service.ts\");\n/* harmony import */ var _pos_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pos.service */ \"(app-pages-browser)/./src/lib/firebase/services/pos.service.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/constants */ \"(app-pages-browser)/./src/constants/index.ts\");\n\n\n\n\n\nclass DashboardService extends _base_service__WEBPACK_IMPORTED_MODULE_2__.BaseService {\n    async getStatsForDateRange(startDate, endDate) {\n        const ordersRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.SALES_ORDERS);\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(ordersRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(startDate)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"orderDate\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(endDate)));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        let revenue = 0;\n        const customerIds = new Set();\n        snapshot.docs.forEach((doc)=>{\n            var _order_customerInfo;\n            const order = doc.data();\n            revenue += order.totalAmount;\n            if (order.customerId) {\n                customerIds.add(order.customerId);\n            } else if ((_order_customerInfo = order.customerInfo) === null || _order_customerInfo === void 0 ? void 0 : _order_customerInfo.phone) {\n                // Fallback to phone if customerId is not present\n                customerIds.add(order.customerInfo.phone);\n            }\n        });\n        return {\n            revenue,\n            orders: snapshot.size,\n            customers: customerIds\n        };\n    }\n    calculatePercentageChange(current, previous) {\n        if (previous === 0) {\n            return current > 0 ? 100 : 0;\n        }\n        return (current - previous) / previous * 100;\n    }\n    async getDashboardStats() {\n        let lowStockThreshold = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5, monthlyTarget = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2500000000;\n        try {\n            const now = new Date();\n            const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);\n            const endOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);\n            const yesterday = new Date(now);\n            yesterday.setDate(now.getDate() - 1);\n            const startOfYesterday = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 0, 0, 0);\n            const endOfYesterday = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 23, 59, 59);\n            const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n            const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);\n            // --- 1. Today's & Yesterday's Stats ---\n            const [todayStatsData, yesterdayStatsData] = await Promise.all([\n                this.getStatsForDateRange(startOfToday, endOfToday),\n                this.getStatsForDateRange(startOfYesterday, endOfYesterday)\n            ]);\n            const todayAvgOrderValue = todayStatsData.orders > 0 ? todayStatsData.revenue / todayStatsData.orders : 0;\n            const yesterdayAvgOrderValue = yesterdayStatsData.orders > 0 ? yesterdayStatsData.revenue / yesterdayStatsData.orders : 0;\n            const todayStats = {\n                revenue: todayStatsData.revenue,\n                orders: todayStatsData.orders,\n                avgOrderValue: todayAvgOrderValue,\n                customers: todayStatsData.customers.size,\n                revenueChange: this.calculatePercentageChange(todayStatsData.revenue, yesterdayStatsData.revenue),\n                ordersChange: this.calculatePercentageChange(todayStatsData.orders, yesterdayStatsData.orders),\n                avgOrderValueChange: this.calculatePercentageChange(todayAvgOrderValue, yesterdayAvgOrderValue),\n                customersChange: this.calculatePercentageChange(todayStatsData.customers.size, yesterdayStatsData.customers.size)\n            };\n            // --- 2. Inventory Alerts ---\n            const availableProductsResponse = await _pos_service__WEBPACK_IMPORTED_MODULE_3__.posService.getAvailableProductsForSale();\n            if (!availableProductsResponse.success || !availableProductsResponse.data) {\n                throw new Error(\"Could not fetch available products for inventory alerts.\");\n            }\n            const inventoryAlerts = [];\n            availableProductsResponse.data.forEach((product)=>{\n                product.variants.forEach((variant)=>{\n                    if (variant.totalStock <= lowStockThreshold) {\n                        inventoryAlerts.push({\n                            model: product.productName,\n                            variant: \"\".concat(variant.storageCapacity, \" \").concat(variant.colorName),\n                            stock: variant.totalStock,\n                            status: variant.totalStock === 0 ? \"out\" : \"low\"\n                        });\n                    }\n                });\n            });\n            // --- 3. Top Selling Products Today ---\n            // Using collectionGroup query on order items\n            const itemsRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collectionGroup)(_lib_firebase__WEBPACK_IMPORTED_MODULE_1__.db, _constants__WEBPACK_IMPORTED_MODULE_4__.SUBCOLLECTIONS.ITEMS);\n            const itemsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)(itemsRef, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"createdAt\", \">=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(startOfToday)), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where)(\"createdAt\", \"<=\", firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp.fromDate(endOfToday)));\n            const itemsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(itemsQuery);\n            const productSales = new Map();\n            itemsSnapshot.docs.forEach((doc)=>{\n                const item = doc.data();\n                // Defensive check: Ensure the item and its key fields are valid\n                if (!item || !item.variantId || !item.productName) {\n                    console.warn(\"Skipping malformed order item from Firestore:\", doc.id);\n                    return; // Skip this document\n                }\n                const key = item.variantId;\n                const name = \"\".concat(item.productName, \" \").concat(item.storageCapacity || \"\");\n                if (!productSales.has(key)) {\n                    productSales.set(key, {\n                        name: name,\n                        sold: 0,\n                        revenue: 0\n                    });\n                }\n                const product = productSales.get(key);\n                // Use default value 0 if quantity or finalPrice are missing/falsy\n                product.sold += item.quantity || 0;\n                product.revenue += item.finalPrice || 0;\n            });\n            const topProducts = Array.from(productSales.values()).sort((a, b)=>b.revenue - a.revenue).slice(0, 5); // Get top 5\n            // --- 4. Monthly Revenue ---\n            const monthlyStats = await this.getStatsForDateRange(startOfMonth, endOfMonth);\n            const monthlyRevenue = {\n                current: monthlyStats.revenue,\n                target: monthlyTarget,\n                progress: monthlyTarget > 0 ? monthlyStats.revenue / monthlyTarget * 100 : 0\n            };\n            // --- Combine all data ---\n            const dashboardData = {\n                todayStats,\n                inventoryAlerts,\n                topProducts,\n                monthlyRevenue\n            };\n            return {\n                success: true,\n                data: dashboardData\n            };\n        } catch (error) {\n            return this.handleError(error);\n        }\n    }\n    constructor(){\n        super(\"dashboard\"); // Not a real collection, just for base class\n    }\n}\nconst dashboardService = new DashboardService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firebase/services/dashboard.service.ts\n"));

/***/ })

});